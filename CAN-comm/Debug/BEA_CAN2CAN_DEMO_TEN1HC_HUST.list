
BEA_CAN2CAN_DEMO_TEN1HC_HUST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004434  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080045c4  080045c4  000055c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004644  08004644  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004644  08004644  00005644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800464c  0800464c  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800464c  0800464c  0000564c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004650  08004650  00005650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004654  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000607c  2**0
                  CONTENTS
 10 .bss          000012cc  2000007c  2000007c  0000607c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001348  20001348  0000607c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7e3  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b60  00000000  00000000  0001088f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  000123f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000670  00000000  00000000  00012c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b74  00000000  00000000  000132d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab25  00000000  00000000  00014e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bab26  00000000  00000000  0001f969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000da48f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000270c  00000000  00000000  000da4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000dcbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045ac 	.word	0x080045ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080045ac 	.word	0x080045ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t i,j = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	80fb      	strh	r3, [r7, #6]
	uint16_t Consecutive_Cntr = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fcdb 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f847 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f945 	bl	8000804 <MX_GPIO_Init>
  MX_CAN1_Init();
 800057a:	f000 f8ad 	bl	80006d8 <MX_CAN1_Init>
  MX_CAN2_Init();
 800057e:	f000 f8e1 	bl	8000744 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000582:	f000 f915 	bl	80007b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 8000586:	f000 f9b9 	bl	80008fc <MX_CAN1_Setup>
  MX_CAN2_Setup();
 800058a:	f000 f9cb 	bl	8000924 <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800058e:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <main+0x8c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <main+0x8c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f042 0220 	orr.w	r2, r2, #32
 800059c:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Example Function to print can message via uart
  PrintCANLog(CAN1_pHeader.StdId, &CAN1_DATA_TX[0]);
 800059e:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <main+0x90>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4913      	ldr	r1, [pc, #76]	@ (80005f4 <main+0x94>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f9ea 	bl	8000980 <PrintCANLog>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if(!BtnU) /*IG OFF->ON stimulation*/
 80005ac:	2102      	movs	r1, #2
 80005ae:	4812      	ldr	r0, [pc, #72]	@ (80005f8 <main+0x98>)
 80005b0:	f001 fe32 	bl	8002218 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1f8      	bne.n	80005ac <main+0x4c>
    {
      delay(20);
 80005ba:	2014      	movs	r0, #20
 80005bc:	f000 fa8e 	bl	8000adc <delay>
      USART3_SendString((uint8_t *)"IG OFF ");
 80005c0:	480e      	ldr	r0, [pc, #56]	@ (80005fc <main+0x9c>)
 80005c2:	f000 f9c3 	bl	800094c <USART3_SendString>
      while(!BtnU);
 80005c6:	bf00      	nop
 80005c8:	2102      	movs	r1, #2
 80005ca:	480b      	ldr	r0, [pc, #44]	@ (80005f8 <main+0x98>)
 80005cc:	f001 fe24 	bl	8002218 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f8      	beq.n	80005c8 <main+0x68>
      MX_CAN1_Setup();
 80005d6:	f000 f991 	bl	80008fc <MX_CAN1_Setup>
      MX_CAN2_Setup();
 80005da:	f000 f9a3 	bl	8000924 <MX_CAN2_Setup>
      USART3_SendString((uint8_t *)"-> IG ON \n");
 80005de:	4808      	ldr	r0, [pc, #32]	@ (8000600 <main+0xa0>)
 80005e0:	f000 f9b4 	bl	800094c <USART3_SendString>
      delay(20);
 80005e4:	2014      	movs	r0, #20
 80005e6:	f000 fa79 	bl	8000adc <delay>
    if(!BtnU) /*IG OFF->ON stimulation*/
 80005ea:	e7df      	b.n	80005ac <main+0x4c>
 80005ec:	200000e8 	.word	0x200000e8
 80005f0:	20000130 	.word	0x20000130
 80005f4:	200011d8 	.word	0x200011d8
 80005f8:	40020000 	.word	0x40020000
 80005fc:	080045c4 	.word	0x080045c4
 8000600:	080045cc 	.word	0x080045cc

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	@ 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fb4a 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000678:	23a8      	movs	r3, #168	@ 0xa8
 800067a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fe01 	bl	8002290 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 fa2f 	bl	8000af6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2105      	movs	r1, #5
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 f862 	bl	8002780 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 fa18 	bl	8000af6 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	@ 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_CAN1_Init+0x64>)
 80006de:	4a18      	ldr	r2, [pc, #96]	@ (8000740 <MX_CAN1_Init+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_CAN1_Init+0x64>)
 80006e4:	2215      	movs	r2, #21
 80006e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_CAN1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_CAN1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_CAN1_Init+0x64>)
 80006f6:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80006fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_CAN1_Init+0x64>)
 80006fe:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000702:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_CAN1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_CAN1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_CAN1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_CAN1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <MX_CAN1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_CAN1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_CAN1_Init+0x64>)
 800072a:	f000 fc93 	bl	8001054 <HAL_CAN_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000734:	f000 f9df 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000098 	.word	0x20000098
 8000740:	40006400 	.word	0x40006400

08000744 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <MX_CAN2_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <MX_CAN2_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 800074e:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <MX_CAN2_Init+0x64>)
 8000750:	2215      	movs	r2, #21
 8000752:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_CAN2_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_CAN2_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_CAN2_Init+0x64>)
 8000762:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000766:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_CAN2_Init+0x64>)
 800076a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800076e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000770:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <MX_CAN2_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_CAN2_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_CAN2_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_CAN2_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_CAN2_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_CAN2_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_CAN2_Init+0x64>)
 8000796:	f000 fc5d 	bl	8001054 <HAL_CAN_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f9a9 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000c0 	.word	0x200000c0
 80007ac:	40006800 	.word	0x40006800

080007b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_USART3_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e8:	f002 f9ea 	bl	8002bc0 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f980 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000e8 	.word	0x200000e8
 8000800:	40004800 	.word	0x40004800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b34      	ldr	r3, [pc, #208]	@ (80008f0 <MX_GPIO_Init+0xec>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a33      	ldr	r2, [pc, #204]	@ (80008f0 <MX_GPIO_Init+0xec>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b31      	ldr	r3, [pc, #196]	@ (80008f0 <MX_GPIO_Init+0xec>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <MX_GPIO_Init+0xec>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a2c      	ldr	r2, [pc, #176]	@ (80008f0 <MX_GPIO_Init+0xec>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <MX_GPIO_Init+0xec>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <MX_GPIO_Init+0xec>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a25      	ldr	r2, [pc, #148]	@ (80008f0 <MX_GPIO_Init+0xec>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <MX_GPIO_Init+0xec>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <MX_GPIO_Init+0xec>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <MX_GPIO_Init+0xec>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_GPIO_Init+0xec>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800088a:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 800088e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000894:	2301      	movs	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4815      	ldr	r0, [pc, #84]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 80008a0:	f001 fb1e 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	480f      	ldr	r0, [pc, #60]	@ (80008f8 <MX_GPIO_Init+0xf4>)
 80008ba:	f001 fb11 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <MX_GPIO_Init+0xf4>)
 80008d2:	f001 fb05 	bl	8001ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2101      	movs	r1, #1
 80008da:	2006      	movs	r0, #6
 80008dc:	f001 fa37 	bl	8001d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008e0:	2006      	movs	r0, #6
 80008e2:	f001 fa50 	bl	8001d86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	@ 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020000 	.word	0x40020000

080008fc <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8000900:	4906      	ldr	r1, [pc, #24]	@ (800091c <MX_CAN1_Setup+0x20>)
 8000902:	4807      	ldr	r0, [pc, #28]	@ (8000920 <MX_CAN1_Setup+0x24>)
 8000904:	f000 fca2 	bl	800124c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_CAN1_Setup+0x24>)
 800090a:	f000 fd7f 	bl	800140c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800090e:	2102      	movs	r1, #2
 8000910:	4803      	ldr	r0, [pc, #12]	@ (8000920 <MX_CAN1_Setup+0x24>)
 8000912:	f000 fee1 	bl	80016d8 <HAL_CAN_ActivateNotification>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000164 	.word	0x20000164
 8000920:	20000098 	.word	0x20000098

08000924 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8000928:	4906      	ldr	r1, [pc, #24]	@ (8000944 <MX_CAN2_Setup+0x20>)
 800092a:	4807      	ldr	r0, [pc, #28]	@ (8000948 <MX_CAN2_Setup+0x24>)
 800092c:	f000 fc8e 	bl	800124c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_CAN2_Setup+0x24>)
 8000932:	f000 fd6b 	bl	800140c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000936:	2102      	movs	r1, #2
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <MX_CAN2_Setup+0x24>)
 800093a:	f000 fecd 	bl	80016d8 <HAL_CAN_ActivateNotification>
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200001a8 	.word	0x200001a8
 8000948:	200000c0 	.word	0x200000c0

0800094c <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 8000954:	e009      	b.n	800096a <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	2201      	movs	r2, #1
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4807      	ldr	r0, [pc, #28]	@ (800097c <USART3_SendString+0x30>)
 8000960:	f002 f97e 	bl	8002c60 <HAL_UART_Transmit>
      ch++;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3301      	adds	r3, #1
 8000968:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1f1      	bne.n	8000956 <USART3_SendString+0xa>
   }
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000e8 	.word	0x200000e8

08000980 <PrintCANLog>:
void PrintCANLog(uint16_t CANID, uint8_t * CAN_Frame)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	80fb      	strh	r3, [r7, #6]
	uint16_t loopIndx = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	83fb      	strh	r3, [r7, #30]
	char bufID[3] = "   ";
 8000990:	4a3b      	ldr	r2, [pc, #236]	@ (8000a80 <PrintCANLog+0x100>)
 8000992:	f107 0318 	add.w	r3, r7, #24
 8000996:	6812      	ldr	r2, [r2, #0]
 8000998:	4611      	mov	r1, r2
 800099a:	8019      	strh	r1, [r3, #0]
 800099c:	3302      	adds	r3, #2
 800099e:	0c12      	lsrs	r2, r2, #16
 80009a0:	701a      	strb	r2, [r3, #0]
	char bufDat[2] = "  ";
 80009a2:	f242 0320 	movw	r3, #8224	@ 0x2020
 80009a6:	82bb      	strh	r3, [r7, #20]
	char bufTime [8]="        ";
 80009a8:	4a36      	ldr	r2, [pc, #216]	@ (8000a84 <PrintCANLog+0x104>)
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b2:	e883 0003 	stmia.w	r3, {r0, r1}

	sprintf(bufTime,"%d",TimeStamp);
 80009b6:	4b34      	ldr	r3, [pc, #208]	@ (8000a88 <PrintCANLog+0x108>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4933      	ldr	r1, [pc, #204]	@ (8000a8c <PrintCANLog+0x10c>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 f953 	bl	8003c6c <siprintf>
	USART3_SendString((uint8_t*)bufTime);
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffbe 	bl	800094c <USART3_SendString>
	USART3_SendString((uint8_t*)" ");
 80009d0:	482f      	ldr	r0, [pc, #188]	@ (8000a90 <PrintCANLog+0x110>)
 80009d2:	f7ff ffbb 	bl	800094c <USART3_SendString>

	sprintf(bufID,"%X",CANID);
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	492d      	ldr	r1, [pc, #180]	@ (8000a94 <PrintCANLog+0x114>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 f944 	bl	8003c6c <siprintf>
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	83fb      	strh	r3, [r7, #30]
 80009e8:	e00a      	b.n	8000a00 <PrintCANLog+0x80>
	{
		bufsend[loopIndx]  = bufID[loopIndx];
 80009ea:	8bfa      	ldrh	r2, [r7, #30]
 80009ec:	8bfb      	ldrh	r3, [r7, #30]
 80009ee:	3220      	adds	r2, #32
 80009f0:	443a      	add	r2, r7
 80009f2:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80009f6:	4a28      	ldr	r2, [pc, #160]	@ (8000a98 <PrintCANLog+0x118>)
 80009f8:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 80009fa:	8bfb      	ldrh	r3, [r7, #30]
 80009fc:	3301      	adds	r3, #1
 80009fe:	83fb      	strh	r3, [r7, #30]
 8000a00:	8bfb      	ldrh	r3, [r7, #30]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d9f1      	bls.n	80009ea <PrintCANLog+0x6a>
	}
	bufsend[3] = ':';
 8000a06:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <PrintCANLog+0x118>)
 8000a08:	223a      	movs	r2, #58	@ 0x3a
 8000a0a:	70da      	strb	r2, [r3, #3]
	bufsend[4] = ' ';
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <PrintCANLog+0x118>)
 8000a0e:	2220      	movs	r2, #32
 8000a10:	711a      	strb	r2, [r3, #4]


	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000a12:	2300      	movs	r3, #0
 8000a14:	83fb      	strh	r3, [r7, #30]
 8000a16:	e025      	b.n	8000a64 <PrintCANLog+0xe4>
	{
		sprintf(bufDat,"%02X",CAN_Frame[loopIndx]);
 8000a18:	8bfb      	ldrh	r3, [r7, #30]
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	491d      	ldr	r1, [pc, #116]	@ (8000a9c <PrintCANLog+0x11c>)
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 f91f 	bl	8003c6c <siprintf>
		bufsend[loopIndx*3 + 5] = bufDat[0];
 8000a2e:	8bfa      	ldrh	r2, [r7, #30]
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	3305      	adds	r3, #5
 8000a38:	7d39      	ldrb	r1, [r7, #20]
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <PrintCANLog+0x118>)
 8000a3c:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 6] = bufDat[1];
 8000a3e:	8bfa      	ldrh	r2, [r7, #30]
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	3306      	adds	r3, #6
 8000a48:	7d79      	ldrb	r1, [r7, #21]
 8000a4a:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <PrintCANLog+0x118>)
 8000a4c:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 7] = ' ';
 8000a4e:	8bfa      	ldrh	r2, [r7, #30]
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	3307      	adds	r3, #7
 8000a58:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <PrintCANLog+0x118>)
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000a5e:	8bfb      	ldrh	r3, [r7, #30]
 8000a60:	3301      	adds	r3, #1
 8000a62:	83fb      	strh	r3, [r7, #30]
 8000a64:	8bfb      	ldrh	r3, [r7, #30]
 8000a66:	2b07      	cmp	r3, #7
 8000a68:	d9d6      	bls.n	8000a18 <PrintCANLog+0x98>
	}
	bufsend[29] = '\n';
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <PrintCANLog+0x118>)
 8000a6c:	220a      	movs	r2, #10
 8000a6e:	775a      	strb	r2, [r3, #29]
	USART3_SendString((unsigned char*)bufsend);
 8000a70:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <PrintCANLog+0x118>)
 8000a72:	f7ff ff6b 	bl	800094c <USART3_SendString>
}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	080045ec 	.word	0x080045ec
 8000a84:	080045f0 	.word	0x080045f0
 8000a88:	200011f0 	.word	0x200011f0
 8000a8c:	080045d8 	.word	0x080045d8
 8000a90:	080045dc 	.word	0x080045dc
 8000a94:	080045e0 	.word	0x080045e0
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	080045e4 	.word	0x080045e4

08000aa0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x30>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x34>)
 8000ab0:	7819      	ldrb	r1, [r3, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x38>)
 8000ab4:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x30>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x30>)
 8000ac0:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200001d0 	.word	0x200001d0
 8000ad4:	200011d4 	.word	0x200011d4
 8000ad8:	200001d4 	.word	0x200001d4

08000adc <delay>:
void delay(uint16_t delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fa8f 	bl	800100c <HAL_Delay>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afa:	b672      	cpsid	i
}
 8000afc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afe:	bf00      	nop
 8000b00:	e7fd      	b.n	8000afe <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	@ 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a4a      	ldr	r2, [pc, #296]	@ (8000c9c <HAL_CAN_MspInit+0x148>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d13e      	bne.n	8000bf4 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b76:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca0 <HAL_CAN_MspInit+0x14c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a48      	ldr	r2, [pc, #288]	@ (8000ca0 <HAL_CAN_MspInit+0x14c>)
 8000b7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b80:	4b47      	ldr	r3, [pc, #284]	@ (8000ca0 <HAL_CAN_MspInit+0x14c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10d      	bne.n	8000ba4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	4b45      	ldr	r3, [pc, #276]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	4a44      	ldr	r2, [pc, #272]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000b92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b98:	4b42      	ldr	r3, [pc, #264]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bac:	4a3d      	ldr	r2, [pc, #244]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bc0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bd2:	2309      	movs	r3, #9
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4832      	ldr	r0, [pc, #200]	@ (8000ca8 <HAL_CAN_MspInit+0x154>)
 8000bde:	f001 f97f 	bl	8001ee0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2102      	movs	r1, #2
 8000be6:	2014      	movs	r0, #20
 8000be8:	f001 f8b1 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bec:	2014      	movs	r0, #20
 8000bee:	f001 f8ca 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000bf2:	e04f      	b.n	8000c94 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8000cac <HAL_CAN_MspInit+0x158>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d14a      	bne.n	8000c94 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	4a27      	ldr	r2, [pc, #156]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000c08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <HAL_CAN_MspInit+0x14c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca0 <HAL_CAN_MspInit+0x14c>)
 8000c22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <HAL_CAN_MspInit+0x14c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d10d      	bne.n	8000c48 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	4a14      	ldr	r2, [pc, #80]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_CAN_MspInit+0x150>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c64:	2360      	movs	r3, #96	@ 0x60
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c74:	2309      	movs	r3, #9
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <HAL_CAN_MspInit+0x15c>)
 8000c80:	f001 f92e 	bl	8001ee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2102      	movs	r1, #2
 8000c88:	2040      	movs	r0, #64	@ 0x40
 8000c8a:	f001 f860 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000c8e:	2040      	movs	r0, #64	@ 0x40
 8000c90:	f001 f879 	bl	8001d86 <HAL_NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	@ 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40006400 	.word	0x40006400
 8000ca0:	200011f4 	.word	0x200011f4
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40006800 	.word	0x40006800
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <HAL_UART_MspInit+0x94>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d134      	bne.n	8000d40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d20:	2307      	movs	r3, #7
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <HAL_UART_MspInit+0x9c>)
 8000d2c:	f001 f8d8 	bl	8001ee0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	2027      	movs	r0, #39	@ 0x27
 8000d36:	f001 f80a 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d3a:	2027      	movs	r0, #39	@ 0x27
 8000d3c:	f001 f823 	bl	8001d86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	@ 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40004800 	.word	0x40004800
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020800 	.word	0x40020800

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f90e 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <SysTick_Handler+0x18>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a02      	ldr	r2, [pc, #8]	@ (8000dc0 <SysTick_Handler+0x18>)
 8000db8:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200011f0 	.word	0x200011f0

08000dc4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f001 fa3d 	bl	8002248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <CAN1_RX0_IRQHandler+0x1c>)
 8000dda:	f000 fca3 	bl	8001724 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
 8000dde:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <CAN1_RX0_IRQHandler+0x20>)
 8000de0:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <CAN1_RX0_IRQHandler+0x24>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <CAN1_RX0_IRQHandler+0x1c>)
 8000de6:	f000 fb55 	bl	8001494 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000098 	.word	0x20000098
 8000df4:	200011e0 	.word	0x200011e0
 8000df8:	20000148 	.word	0x20000148

08000dfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <USART3_IRQHandler+0x18>)
 8000e02:	f001 ffdd 	bl	8002dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8000e06:	2201      	movs	r2, #1
 8000e08:	4903      	ldr	r1, [pc, #12]	@ (8000e18 <USART3_IRQHandler+0x1c>)
 8000e0a:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <USART3_IRQHandler+0x18>)
 8000e0c:	f001 ffb3 	bl	8002d76 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000e8 	.word	0x200000e8
 8000e18:	200011d4 	.word	0x200011d4

08000e1c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	uint8_t NumByteSend;
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <CAN2_RX0_IRQHandler+0x1c>)
 8000e22:	f000 fc7f 	bl	8001724 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 8000e26:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <CAN2_RX0_IRQHandler+0x20>)
 8000e28:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <CAN2_RX0_IRQHandler+0x24>)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <CAN2_RX0_IRQHandler+0x1c>)
 8000e2e:	f000 fb31 	bl	8001494 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000c0 	.word	0x200000c0
 8000e3c:	200011e8 	.word	0x200011e8
 8000e40:	2000018c 	.word	0x2000018c

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f002 ff22 	bl	8003cbc <__errno>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <_sbrk+0x64>)
 8000e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20020000 	.word	0x20020000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	200011f8 	.word	0x200011f8
 8000eac:	20001348 	.word	0x20001348

08000eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed8:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eda:	490e      	ldr	r1, [pc, #56]	@ (8000f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000edc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef0:	4c0b      	ldr	r4, [pc, #44]	@ (8000f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000efe:	f7ff ffd7 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f002 fee1 	bl	8003cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fb2b 	bl	8000560 <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f18:	08004654 	.word	0x08004654
  ldr r2, =_sbss
 8000f1c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f20:	20001348 	.word	0x20001348

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	@ (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 fef1 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fdd2 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 ff09 	bl	8001da2 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 fed1 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	@ (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000020 	.word	0x20000020
 8000fc4:	20000028 	.word	0x20000028
 8000fc8:	20000024 	.word	0x20000024

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000028 	.word	0x20000028
 8000ff0:	200011fc 	.word	0x200011fc

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200011fc 	.word	0x200011fc

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000028 	.word	0x20000028

08001054 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e0ed      	b.n	8001242 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fd6e 	bl	8000b54 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0201 	orr.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001088:	f7ff ffb4 	bl	8000ff4 <HAL_GetTick>
 800108c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800108e:	e012      	b.n	80010b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001090:	f7ff ffb0 	bl	8000ff4 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b0a      	cmp	r3, #10
 800109c:	d90b      	bls.n	80010b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2205      	movs	r2, #5
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e0c5      	b.n	8001242 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0e5      	beq.n	8001090 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0202 	bic.w	r2, r2, #2
 80010d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d4:	f7ff ff8e 	bl	8000ff4 <HAL_GetTick>
 80010d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010da:	e012      	b.n	8001102 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010dc:	f7ff ff8a 	bl	8000ff4 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b0a      	cmp	r3, #10
 80010e8:	d90b      	bls.n	8001102 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2205      	movs	r2, #5
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e09f      	b.n	8001242 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1e5      	bne.n	80010dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7e1b      	ldrb	r3, [r3, #24]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e007      	b.n	800113a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7e5b      	ldrb	r3, [r3, #25]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d108      	bne.n	8001154 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e007      	b.n	8001164 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001162:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7e9b      	ldrb	r3, [r3, #26]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d108      	bne.n	800117e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0220 	orr.w	r2, r2, #32
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e007      	b.n	800118e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0220 	bic.w	r2, r2, #32
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7edb      	ldrb	r3, [r3, #27]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d108      	bne.n	80011a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0210 	bic.w	r2, r2, #16
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e007      	b.n	80011b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0210 	orr.w	r2, r2, #16
 80011b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7f1b      	ldrb	r3, [r3, #28]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d108      	bne.n	80011d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0208 	orr.w	r2, r2, #8
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e007      	b.n	80011e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0208 	bic.w	r2, r2, #8
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7f5b      	ldrb	r3, [r3, #29]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d108      	bne.n	80011fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0204 	orr.w	r2, r2, #4
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e007      	b.n	800120c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0204 	bic.w	r2, r2, #4
 800120a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	ea42 0103 	orr.w	r1, r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	1e5a      	subs	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001262:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001264:	7cfb      	ldrb	r3, [r7, #19]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d003      	beq.n	8001272 <HAL_CAN_ConfigFilter+0x26>
 800126a:	7cfb      	ldrb	r3, [r7, #19]
 800126c:	2b02      	cmp	r3, #2
 800126e:	f040 80be 	bne.w	80013ee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001272:	4b65      	ldr	r3, [pc, #404]	@ (8001408 <HAL_CAN_ConfigFilter+0x1bc>)
 8001274:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800127c:	f043 0201 	orr.w	r2, r3, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800128c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	431a      	orrs	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	2201      	movs	r2, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	401a      	ands	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d123      	bne.n	800131c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3248      	adds	r2, #72	@ 0x48
 80012fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001310:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001312:	6979      	ldr	r1, [r7, #20]
 8001314:	3348      	adds	r3, #72	@ 0x48
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d122      	bne.n	800136a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	431a      	orrs	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001344:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3248      	adds	r2, #72	@ 0x48
 800134a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800135e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001360:	6979      	ldr	r1, [r7, #20]
 8001362:	3348      	adds	r3, #72	@ 0x48
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43db      	mvns	r3, r3
 800137c:	401a      	ands	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001384:	e007      	b.n	8001396 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	431a      	orrs	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d109      	bne.n	80013b2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80013b0:	e007      	b.n	80013c2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d107      	bne.n	80013da <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013e0:	f023 0201 	bic.w	r2, r3, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e006      	b.n	80013fc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
  }
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40006400 	.word	0x40006400

0800140c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d12e      	bne.n	800147e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001438:	f7ff fddc 	bl	8000ff4 <HAL_GetTick>
 800143c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800143e:	e012      	b.n	8001466 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001440:	f7ff fdd8 	bl	8000ff4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d90b      	bls.n	8001466 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2205      	movs	r2, #5
 800145e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e012      	b.n	800148c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1e5      	bne.n	8001440 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e006      	b.n	800148c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
  }
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d003      	beq.n	80014b8 <HAL_CAN_GetRxMessage+0x24>
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	f040 8103 	bne.w	80016be <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10e      	bne.n	80014dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d116      	bne.n	80014fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0f7      	b.n	80016cc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0e8      	b.n	80016cc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	331b      	adds	r3, #27
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	4413      	add	r3, r2
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0204 	and.w	r2, r3, #4
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10c      	bne.n	8001532 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	331b      	adds	r3, #27
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4413      	add	r3, r2
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	0d5b      	lsrs	r3, r3, #21
 8001528:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e00b      	b.n	800154a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	331b      	adds	r3, #27
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4413      	add	r3, r2
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	331b      	adds	r3, #27
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0202 	and.w	r2, r3, #2
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	331b      	adds	r3, #27
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	3304      	adds	r3, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2208      	movs	r2, #8
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	e00b      	b.n	8001598 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	331b      	adds	r3, #27
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	3304      	adds	r3, #4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	331b      	adds	r3, #27
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	4413      	add	r3, r2
 80015a4:	3304      	adds	r3, #4
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	331b      	adds	r3, #27
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4413      	add	r3, r2
 80015bc:	3304      	adds	r3, #4
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	0a1a      	lsrs	r2, r3, #8
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0c1a      	lsrs	r2, r3, #16
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3302      	adds	r3, #2
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	0e1a      	lsrs	r2, r3, #24
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3303      	adds	r3, #3
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3304      	adds	r3, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0a1a      	lsrs	r2, r3, #8
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3305      	adds	r3, #5
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0c1a      	lsrs	r2, r3, #16
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	3306      	adds	r3, #6
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4413      	add	r3, r2
 8001682:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0e1a      	lsrs	r2, r3, #24
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	3307      	adds	r3, #7
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d108      	bne.n	80016aa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0220 	orr.w	r2, r2, #32
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0220 	orr.w	r2, r2, #32
 80016b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e006      	b.n	80016cc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
  }
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d002      	beq.n	80016f6 <HAL_CAN_ActivateNotification+0x1e>
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d109      	bne.n	800170a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6959      	ldr	r1, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e006      	b.n	8001718 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
  }
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d07c      	beq.n	8001864 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2201      	movs	r2, #1
 800177a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f983 	bl	8001a92 <HAL_CAN_TxMailbox0CompleteCallback>
 800178c:	e016      	b.n	80017bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a0:	e00c      	b.n	80017bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b4:	e002      	b.n	80017bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f989 	bl	8001ace <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d024      	beq.n	8001810 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f963 	bl	8001aa6 <HAL_CAN_TxMailbox1CompleteCallback>
 80017e0:	e016      	b.n	8001810 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f4:	e00c      	b.n	8001810 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
 8001808:	e002      	b.n	8001810 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f969 	bl	8001ae2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d024      	beq.n	8001864 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001822:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f943 	bl	8001aba <HAL_CAN_TxMailbox2CompleteCallback>
 8001834:	e016      	b.n	8001864 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
 8001848:	e00c      	b.n	8001864 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
 800185c:	e002      	b.n	8001864 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f949 	bl	8001af6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00c      	beq.n	8001888 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2210      	movs	r2, #16
 8001886:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2208      	movs	r2, #8
 80018a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f93a 	bl	8001b1e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d009      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f921 	bl	8001b0a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00c      	beq.n	80018ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2210      	movs	r2, #16
 80018ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2208      	movs	r2, #8
 8001906:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f91c 	bl	8001b46 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	d009      	beq.n	800192c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f903 	bl	8001b32 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2210      	movs	r2, #16
 8001946:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f906 	bl	8001b5a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00b      	beq.n	8001970 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d006      	beq.n	8001970 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2208      	movs	r2, #8
 8001968:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f8ff 	bl	8001b6e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d07b      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d072      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d043      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d03e      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019f2:	2b60      	cmp	r3, #96	@ 0x60
 80019f4:	d02b      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x32a>
 80019f6:	2b60      	cmp	r3, #96	@ 0x60
 80019f8:	d82e      	bhi.n	8001a58 <HAL_CAN_IRQHandler+0x334>
 80019fa:	2b50      	cmp	r3, #80	@ 0x50
 80019fc:	d022      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x320>
 80019fe:	2b50      	cmp	r3, #80	@ 0x50
 8001a00:	d82a      	bhi.n	8001a58 <HAL_CAN_IRQHandler+0x334>
 8001a02:	2b40      	cmp	r3, #64	@ 0x40
 8001a04:	d019      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x316>
 8001a06:	2b40      	cmp	r3, #64	@ 0x40
 8001a08:	d826      	bhi.n	8001a58 <HAL_CAN_IRQHandler+0x334>
 8001a0a:	2b30      	cmp	r3, #48	@ 0x30
 8001a0c:	d010      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x30c>
 8001a0e:	2b30      	cmp	r3, #48	@ 0x30
 8001a10:	d822      	bhi.n	8001a58 <HAL_CAN_IRQHandler+0x334>
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d002      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x2f8>
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d005      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a1a:	e01d      	b.n	8001a58 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a24:	e019      	b.n	8001a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	f043 0310 	orr.w	r3, r3, #16
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a2e:	e014      	b.n	8001a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	f043 0320 	orr.w	r3, r3, #32
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a38:	e00f      	b.n	8001a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a42:	e00a      	b.n	8001a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a4c:	e005      	b.n	8001a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a56:	e000      	b.n	8001a5a <HAL_CAN_IRQHandler+0x336>
            break;
 8001a58:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699a      	ldr	r2, [r3, #24]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a68:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f87c 	bl	8001b82 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	@ 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	@ (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	@ (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	@ (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	@ 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff29 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff3e 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff8e 	bl	8001c8c <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5d 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff31 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff f914 	bl	8000ff4 <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d008      	beq.n	8001dec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2280      	movs	r2, #128	@ 0x80
 8001dde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e052      	b.n	8001e92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0216 	bic.w	r2, r2, #22
 8001dfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d103      	bne.n	8001e1c <HAL_DMA_Abort+0x62>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0208 	bic.w	r2, r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3c:	e013      	b.n	8001e66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e3e:	f7ff f8d9 	bl	8000ff4 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d90c      	bls.n	8001e66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2203      	movs	r2, #3
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e015      	b.n	8001e92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e4      	bne.n	8001e3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e78:	223f      	movs	r2, #63	@ 0x3f
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d004      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2280      	movs	r2, #128	@ 0x80
 8001eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e00c      	b.n	8001ed2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2205      	movs	r2, #5
 8001ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e16b      	b.n	80021d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	f040 815a 	bne.w	80021ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d005      	beq.n	8001f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d130      	bne.n	8001f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0201 	and.w	r2, r3, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d017      	beq.n	8001fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d123      	bne.n	8002024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	08da      	lsrs	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3208      	adds	r2, #8
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	08da      	lsrs	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3208      	adds	r2, #8
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0203 	and.w	r2, r3, #3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80b4 	beq.w	80021ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <HAL_GPIO_Init+0x30c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	4a5f      	ldr	r2, [pc, #380]	@ (80021ec <HAL_GPIO_Init+0x30c>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002074:	6453      	str	r3, [r2, #68]	@ 0x44
 8002076:	4b5d      	ldr	r3, [pc, #372]	@ (80021ec <HAL_GPIO_Init+0x30c>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002082:	4a5b      	ldr	r2, [pc, #364]	@ (80021f0 <HAL_GPIO_Init+0x310>)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a52      	ldr	r2, [pc, #328]	@ (80021f4 <HAL_GPIO_Init+0x314>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d02b      	beq.n	8002106 <HAL_GPIO_Init+0x226>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a51      	ldr	r2, [pc, #324]	@ (80021f8 <HAL_GPIO_Init+0x318>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d025      	beq.n	8002102 <HAL_GPIO_Init+0x222>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a50      	ldr	r2, [pc, #320]	@ (80021fc <HAL_GPIO_Init+0x31c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <HAL_GPIO_Init+0x21e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002200 <HAL_GPIO_Init+0x320>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x21a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002204 <HAL_GPIO_Init+0x324>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x216>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002208 <HAL_GPIO_Init+0x328>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x212>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4c      	ldr	r2, [pc, #304]	@ (800220c <HAL_GPIO_Init+0x32c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x20e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002210 <HAL_GPIO_Init+0x330>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x20a>
 80020e6:	2307      	movs	r3, #7
 80020e8:	e00e      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020ea:	2308      	movs	r3, #8
 80020ec:	e00c      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020ee:	2306      	movs	r3, #6
 80020f0:	e00a      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e008      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e004      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020fe:	2302      	movs	r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x228>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x228>
 8002106:	2300      	movs	r3, #0
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4093      	lsls	r3, r2
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002118:	4935      	ldr	r1, [pc, #212]	@ (80021f0 <HAL_GPIO_Init+0x310>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002126:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_GPIO_Init+0x334>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214a:	4a32      	ldr	r2, [pc, #200]	@ (8002214 <HAL_GPIO_Init+0x334>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002150:	4b30      	ldr	r3, [pc, #192]	@ (8002214 <HAL_GPIO_Init+0x334>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002174:	4a27      	ldr	r2, [pc, #156]	@ (8002214 <HAL_GPIO_Init+0x334>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217a:	4b26      	ldr	r3, [pc, #152]	@ (8002214 <HAL_GPIO_Init+0x334>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219e:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <HAL_GPIO_Init+0x334>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_GPIO_Init+0x334>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c8:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <HAL_GPIO_Init+0x334>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	f67f ae90 	bls.w	8001efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40013800 	.word	0x40013800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40021400 	.word	0x40021400
 800220c:	40021800 	.word	0x40021800
 8002210:	40021c00 	.word	0x40021c00
 8002214:	40013c00 	.word	0x40013c00

08002218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e001      	b.n	800223a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002252:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800225e:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f806 	bl	8002278 <HAL_GPIO_EXTI_Callback>
  }
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40013c00 	.word	0x40013c00

08002278 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e267      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d075      	beq.n	800239a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ae:	4b88      	ldr	r3, [pc, #544]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d00c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ba:	4b85      	ldr	r3, [pc, #532]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d112      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4b82      	ldr	r3, [pc, #520]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022d2:	d10b      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b7e      	ldr	r3, [pc, #504]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05b      	beq.n	8002398 <HAL_RCC_OscConfig+0x108>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d157      	bne.n	8002398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e242      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x74>
 80022f6:	4b76      	ldr	r3, [pc, #472]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a75      	ldr	r2, [pc, #468]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x98>
 800230e:	4b70      	ldr	r3, [pc, #448]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6f      	ldr	r2, [pc, #444]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6d      	ldr	r3, [pc, #436]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6c      	ldr	r2, [pc, #432]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002328:	4b69      	ldr	r3, [pc, #420]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a68      	ldr	r2, [pc, #416]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b66      	ldr	r3, [pc, #408]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a65      	ldr	r2, [pc, #404]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fe54 	bl	8000ff4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fe50 	bl	8000ff4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e207      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b5b      	ldr	r3, [pc, #364]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xc0>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fe40 	bl	8000ff4 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe fe3c 	bl	8000ff4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1f3      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b51      	ldr	r3, [pc, #324]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0xe8>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d063      	beq.n	800246e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a6:	4b4a      	ldr	r3, [pc, #296]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b47      	ldr	r3, [pc, #284]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b44      	ldr	r3, [pc, #272]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b41      	ldr	r3, [pc, #260]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1c7      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4937      	ldr	r1, [pc, #220]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b34      	ldr	r3, [pc, #208]	@ (80024d4 <HAL_RCC_OscConfig+0x244>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fdf5 	bl	8000ff4 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe fdf1 	bl	8000ff4 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1a8      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b2b      	ldr	r3, [pc, #172]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b28      	ldr	r3, [pc, #160]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4925      	ldr	r1, [pc, #148]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <HAL_RCC_OscConfig+0x244>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fdd4 	bl	8000ff4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe fdd0 	bl	8000ff4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e187      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d036      	beq.n	80024e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <HAL_RCC_OscConfig+0x248>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe fdb4 	bl	8000ff4 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe fdb0 	bl	8000ff4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e167      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCC_OscConfig+0x240>)
 80024a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x200>
 80024ae:	e01b      	b.n	80024e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_RCC_OscConfig+0x248>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7fe fd9d 	bl	8000ff4 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	e00e      	b.n	80024dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024be:	f7fe fd99 	bl	8000ff4 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d907      	bls.n	80024dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e150      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	42470000 	.word	0x42470000
 80024d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b88      	ldr	r3, [pc, #544]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ea      	bne.n	80024be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8097 	beq.w	8002624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b81      	ldr	r3, [pc, #516]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b7d      	ldr	r3, [pc, #500]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	4a7c      	ldr	r2, [pc, #496]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	@ 0x40
 8002516:	4b7a      	ldr	r3, [pc, #488]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b77      	ldr	r3, [pc, #476]	@ (8002704 <HAL_RCC_OscConfig+0x474>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b74      	ldr	r3, [pc, #464]	@ (8002704 <HAL_RCC_OscConfig+0x474>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a73      	ldr	r2, [pc, #460]	@ (8002704 <HAL_RCC_OscConfig+0x474>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fd59 	bl	8000ff4 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fe fd55 	bl	8000ff4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e10c      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	4b6a      	ldr	r3, [pc, #424]	@ (8002704 <HAL_RCC_OscConfig+0x474>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x2ea>
 800256c:	4b64      	ldr	r3, [pc, #400]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002570:	4a63      	ldr	r2, [pc, #396]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	@ 0x70
 8002578:	e01c      	b.n	80025b4 <HAL_RCC_OscConfig+0x324>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x30c>
 8002582:	4b5f      	ldr	r3, [pc, #380]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002586:	4a5e      	ldr	r2, [pc, #376]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6713      	str	r3, [r2, #112]	@ 0x70
 800258e:	4b5c      	ldr	r3, [pc, #368]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002592:	4a5b      	ldr	r2, [pc, #364]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	@ 0x70
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0x324>
 800259c:	4b58      	ldr	r3, [pc, #352]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a0:	4a57      	ldr	r2, [pc, #348]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a8:	4b55      	ldr	r3, [pc, #340]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ac:	4a54      	ldr	r2, [pc, #336]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fd1a 	bl	8000ff4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fd16 	bl	8000ff4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0cb      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025da:	4b49      	ldr	r3, [pc, #292]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ee      	beq.n	80025c4 <HAL_RCC_OscConfig+0x334>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e8:	f7fe fd04 	bl	8000ff4 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe fd00 	bl	8000ff4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0b5      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002606:	4b3e      	ldr	r3, [pc, #248]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ee      	bne.n	80025f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4b39      	ldr	r3, [pc, #228]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	4a38      	ldr	r2, [pc, #224]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a1 	beq.w	8002770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800262e:	4b34      	ldr	r3, [pc, #208]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d05c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d141      	bne.n	80026c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <HAL_RCC_OscConfig+0x478>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fcd4 	bl	8000ff4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fcd0 	bl	8000ff4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e087      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	019b      	lsls	r3, r3, #6
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	491b      	ldr	r1, [pc, #108]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	4b1b      	ldr	r3, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x478>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fca9 	bl	8000ff4 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fca5 	bl	8000ff4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e05c      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b8:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x416>
 80026c4:	e054      	b.n	8002770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <HAL_RCC_OscConfig+0x478>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fc92 	bl	8000ff4 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fc8e 	bl	8000ff4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e045      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_RCC_OscConfig+0x470>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x444>
 80026f2:	e03d      	b.n	8002770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e038      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
 8002700:	40023800 	.word	0x40023800
 8002704:	40007000 	.word	0x40007000
 8002708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800270c:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <HAL_RCC_OscConfig+0x4ec>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d028      	beq.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d121      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d11a      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002744:	4293      	cmp	r3, r2
 8002746:	d111      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	3b01      	subs	r3, #1
 8002756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0cc      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b68      	ldr	r3, [pc, #416]	@ (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d90c      	bls.n	80027bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b65      	ldr	r3, [pc, #404]	@ (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b63      	ldr	r3, [pc, #396]	@ (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b8      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b59      	ldr	r3, [pc, #356]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a58      	ldr	r2, [pc, #352]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ec:	4b53      	ldr	r3, [pc, #332]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a52      	ldr	r2, [pc, #328]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b50      	ldr	r3, [pc, #320]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	494d      	ldr	r1, [pc, #308]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d044      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b47      	ldr	r3, [pc, #284]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d119      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d003      	beq.n	800283e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283a:	2b03      	cmp	r3, #3
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b3f      	ldr	r3, [pc, #252]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b3b      	ldr	r3, [pc, #236]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e067      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b37      	ldr	r3, [pc, #220]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4934      	ldr	r1, [pc, #208]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe fbc0 	bl	8000ff4 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fbbc 	bl	8000ff4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e04f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b2b      	ldr	r3, [pc, #172]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b25      	ldr	r3, [pc, #148]	@ (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d20c      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b22      	ldr	r3, [pc, #136]	@ (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e032      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4916      	ldr	r1, [pc, #88]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490e      	ldr	r1, [pc, #56]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002906:	f000 f821 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800290a:	4602      	mov	r2, r0
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	490a      	ldr	r1, [pc, #40]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a09      	ldr	r2, [pc, #36]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fb20 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023c00 	.word	0x40023c00
 800293c:	40023800 	.word	0x40023800
 8002940:	080045f8 	.word	0x080045f8
 8002944:	20000020 	.word	0x20000020
 8002948:	20000024 	.word	0x20000024

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002950:	b094      	sub	sp, #80	@ 0x50
 8002952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	647b      	str	r3, [r7, #68]	@ 0x44
 8002958:	2300      	movs	r3, #0
 800295a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800295c:	2300      	movs	r3, #0
 800295e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002964:	4b79      	ldr	r3, [pc, #484]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d00d      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x40>
 8002970:	2b08      	cmp	r3, #8
 8002972:	f200 80e1 	bhi.w	8002b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x34>
 800297a:	2b04      	cmp	r3, #4
 800297c:	d003      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x3a>
 800297e:	e0db      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b73      	ldr	r3, [pc, #460]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002982:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002984:	e0db      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002986:	4b73      	ldr	r3, [pc, #460]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800298a:	e0d8      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800298c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002994:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002996:	4b6d      	ldr	r3, [pc, #436]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d063      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	099b      	lsrs	r3, r3, #6
 80029a8:	2200      	movs	r2, #0
 80029aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029b6:	2300      	movs	r3, #0
 80029b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029be:	4622      	mov	r2, r4
 80029c0:	462b      	mov	r3, r5
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	0159      	lsls	r1, r3, #5
 80029cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d0:	0150      	lsls	r0, r2, #5
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4621      	mov	r1, r4
 80029d8:	1a51      	subs	r1, r2, r1
 80029da:	6139      	str	r1, [r7, #16]
 80029dc:	4629      	mov	r1, r5
 80029de:	eb63 0301 	sbc.w	r3, r3, r1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f0:	4659      	mov	r1, fp
 80029f2:	018b      	lsls	r3, r1, #6
 80029f4:	4651      	mov	r1, sl
 80029f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029fa:	4651      	mov	r1, sl
 80029fc:	018a      	lsls	r2, r1, #6
 80029fe:	4651      	mov	r1, sl
 8002a00:	ebb2 0801 	subs.w	r8, r2, r1
 8002a04:	4659      	mov	r1, fp
 8002a06:	eb63 0901 	sbc.w	r9, r3, r1
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1e:	4690      	mov	r8, r2
 8002a20:	4699      	mov	r9, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	eb18 0303 	adds.w	r3, r8, r3
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	462b      	mov	r3, r5
 8002a2c:	eb49 0303 	adc.w	r3, r9, r3
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a3e:	4629      	mov	r1, r5
 8002a40:	024b      	lsls	r3, r1, #9
 8002a42:	4621      	mov	r1, r4
 8002a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a48:	4621      	mov	r1, r4
 8002a4a:	024a      	lsls	r2, r1, #9
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a52:	2200      	movs	r2, #0
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a5c:	f7fd fc08 	bl	8000270 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a68:	e058      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6a:	4b38      	ldr	r3, [pc, #224]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	2200      	movs	r2, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	4611      	mov	r1, r2
 8002a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	f04f 0000 	mov.w	r0, #0
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	0159      	lsls	r1, r3, #5
 8002a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a96:	0150      	lsls	r0, r2, #5
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002abc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	00eb      	lsls	r3, r5, #3
 8002ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad2:	00e2      	lsls	r2, r4, #3
 8002ad4:	4614      	mov	r4, r2
 8002ad6:	461d      	mov	r5, r3
 8002ad8:	4643      	mov	r3, r8
 8002ada:	18e3      	adds	r3, r4, r3
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	464b      	mov	r3, r9
 8002ae0:	eb45 0303 	adc.w	r3, r5, r3
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002af2:	4629      	mov	r1, r5
 8002af4:	028b      	lsls	r3, r1, #10
 8002af6:	4621      	mov	r1, r4
 8002af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002afc:	4621      	mov	r1, r4
 8002afe:	028a      	lsls	r2, r1, #10
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b06:	2200      	movs	r2, #0
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	61fa      	str	r2, [r7, #28]
 8002b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b10:	f7fd fbae 	bl	8000270 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	3301      	adds	r3, #1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002b2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b36:	e002      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3750      	adds	r7, #80	@ 0x50
 8002b44:	46bd      	mov	sp, r7
 8002b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	007a1200 	.word	0x007a1200

08002b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000020 	.word	0x20000020

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b74:	f7ff fff0 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	0a9b      	lsrs	r3, r3, #10
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4903      	ldr	r1, [pc, #12]	@ (8002b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40023800 	.word	0x40023800
 8002b94:	08004608 	.word	0x08004608

08002b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b9c:	f7ff ffdc 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0b5b      	lsrs	r3, r3, #13
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	@ (8002bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	08004608 	.word	0x08004608

08002bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e042      	b.n	8002c58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe f864 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	@ 0x24
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fdbd 	bl	8003784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	@ 0x28
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d175      	bne.n	8002d6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_UART_Transmit+0x2c>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e06e      	b.n	8002d6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2221      	movs	r2, #33	@ 0x21
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c9e:	f7fe f9a9 	bl	8000ff4 <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	88fa      	ldrh	r2, [r7, #6]
 8002ca8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cb8:	d108      	bne.n	8002ccc <HAL_UART_Transmit+0x6c>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d104      	bne.n	8002ccc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	e003      	b.n	8002cd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cd4:	e02e      	b.n	8002d34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2180      	movs	r1, #128	@ 0x80
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fb1f 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e03a      	b.n	8002d6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	3302      	adds	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	e007      	b.n	8002d26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	3301      	adds	r3, #1
 8002d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1cb      	bne.n	8002cd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2140      	movs	r1, #64	@ 0x40
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 faeb 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e006      	b.n	8002d6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e000      	b.n	8002d6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	4613      	mov	r3, r2
 8002d82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d112      	bne.n	8002db6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_UART_Receive_IT+0x26>
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e00b      	b.n	8002db8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	461a      	mov	r2, r3
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fb12 	bl	80033d6 <UART_Start_Receive_IT>
 8002db2:	4603      	mov	r3, r0
 8002db4:	e000      	b.n	8002db8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b0ba      	sub	sp, #232	@ 0xe8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_UART_IRQHandler+0x66>
 8002e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fbf2 	bl	8003608 <UART_Receive_IT>
      return;
 8002e24:	e25b      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80de 	beq.w	8002fec <HAL_UART_IRQHandler+0x22c>
 8002e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80d1 	beq.w	8002fec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_UART_IRQHandler+0xae>
 8002e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_UART_IRQHandler+0xd2>
 8002e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f043 0202 	orr.w	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xf6>
 8002e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f043 0204 	orr.w	r2, r3, #4
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d011      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x126>
 8002ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d105      	bne.n	8002eda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f043 0208 	orr.w	r2, r3, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 81f2 	beq.w	80032d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_UART_IRQHandler+0x14e>
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fb7d 	bl	8003608 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <HAL_UART_IRQHandler+0x17a>
 8002f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d04f      	beq.n	8002fda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa85 	bl	800344a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4a:	2b40      	cmp	r3, #64	@ 0x40
 8002f4c:	d141      	bne.n	8002fd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3314      	adds	r3, #20
 8002f54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1d9      	bne.n	8002f4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d013      	beq.n	8002fca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80031a0 <HAL_UART_IRQHandler+0x3e0>)
 8002fa8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe ff73 	bl	8001e9a <HAL_DMA_Abort_IT>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	e00e      	b.n	8002fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f994 	bl	80032f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	e00a      	b.n	8002fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f990 	bl	80032f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	e006      	b.n	8002fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f98c 	bl	80032f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002fe6:	e175      	b.n	80032d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	bf00      	nop
    return;
 8002fea:	e173      	b.n	80032d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f040 814f 	bne.w	8003294 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8148 	beq.w	8003294 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8141 	beq.w	8003294 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003032:	2b40      	cmp	r3, #64	@ 0x40
 8003034:	f040 80b6 	bne.w	80031a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8145 	beq.w	80032d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003056:	429a      	cmp	r2, r3
 8003058:	f080 813e 	bcs.w	80032d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003062:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800306e:	f000 8088 	beq.w	8003182 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003088:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800308c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800309e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1d9      	bne.n	8003072 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3314      	adds	r3, #20
 80030c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3314      	adds	r3, #20
 80030de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e1      	bne.n	80030be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3314      	adds	r3, #20
 8003100:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800310a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800310c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3314      	adds	r3, #20
 800311a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800311e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003120:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003124:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800312c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e3      	bne.n	80030fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003152:	f023 0310 	bic.w	r3, r3, #16
 8003156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003164:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003166:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800316a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e3      	bne.n	8003140 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fe1c 	bl	8001dba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003190:	b29b      	uxth	r3, r3
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	b29b      	uxth	r3, r3
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f8b7 	bl	800330c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800319e:	e09b      	b.n	80032d8 <HAL_UART_IRQHandler+0x518>
 80031a0:	08003511 	.word	0x08003511
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 808e 	beq.w	80032dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8089 	beq.w	80032dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	330c      	adds	r3, #12
 80031d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80031f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e3      	bne.n	80031ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	623b      	str	r3, [r7, #32]
   return(result);
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3314      	adds	r3, #20
 8003222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003226:	633a      	str	r2, [r7, #48]	@ 0x30
 8003228:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800322c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e3      	bne.n	8003202 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	60fb      	str	r3, [r7, #12]
   return(result);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0310 	bic.w	r3, r3, #16
 800325e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800326c:	61fa      	str	r2, [r7, #28]
 800326e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	617b      	str	r3, [r7, #20]
   return(result);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e3      	bne.n	8003248 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f83d 	bl	800330c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003292:	e023      	b.n	80032dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329c:	2b00      	cmp	r3, #0
 800329e:	d009      	beq.n	80032b4 <HAL_UART_IRQHandler+0x4f4>
 80032a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f943 	bl	8003538 <UART_Transmit_IT>
    return;
 80032b2:	e014      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00e      	beq.n	80032de <HAL_UART_IRQHandler+0x51e>
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f983 	bl	80035d8 <UART_EndTransmit_IT>
    return;
 80032d2:	e004      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
    return;
 80032d4:	bf00      	nop
 80032d6:	e002      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
      return;
 80032d8:	bf00      	nop
 80032da:	e000      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
      return;
 80032dc:	bf00      	nop
  }
}
 80032de:	37e8      	adds	r7, #232	@ 0xe8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003334:	e03b      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d037      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fd fe59 	bl	8000ff4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <UART_WaitOnFlagUntilTimeout+0x30>
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e03a      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d023      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b80      	cmp	r3, #128	@ 0x80
 800336a:	d020      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b40      	cmp	r3, #64	@ 0x40
 8003370:	d01d      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b08      	cmp	r3, #8
 800337e:	d116      	bne.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f857 	bl	800344a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2208      	movs	r2, #8
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e00f      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d0b4      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	4613      	mov	r3, r2
 80033e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2222      	movs	r2, #34	@ 0x22
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800341a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0220 	orr.w	r2, r2, #32
 800343a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800344a:	b480      	push	{r7}
 800344c:	b095      	sub	sp, #84	@ 0x54
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003472:	643a      	str	r2, [r7, #64]	@ 0x40
 8003474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3314      	adds	r3, #20
 800348c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	61fb      	str	r3, [r7, #28]
   return(result);
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d119      	bne.n	80034f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f023 0310 	bic.w	r3, r3, #16
 80034d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034e2:	61ba      	str	r2, [r7, #24]
 80034e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	613b      	str	r3, [r7, #16]
   return(result);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e5      	bne.n	80034c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003504:	bf00      	nop
 8003506:	3754      	adds	r7, #84	@ 0x54
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff fee4 	bl	80032f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b21      	cmp	r3, #33	@ 0x21
 800354a:	d13e      	bne.n	80035ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d114      	bne.n	8003580 <UART_Transmit_IT+0x48>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d110      	bne.n	8003580 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003572:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	1c9a      	adds	r2, r3, #2
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]
 800357e:	e008      	b.n	8003592 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	1c59      	adds	r1, r3, #1
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6211      	str	r1, [r2, #32]
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29b      	uxth	r3, r3
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	4619      	mov	r1, r3
 80035a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff fe73 	bl	80032e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08c      	sub	sp, #48	@ 0x30
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b22      	cmp	r3, #34	@ 0x22
 800361a:	f040 80ae 	bne.w	800377a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003626:	d117      	bne.n	8003658 <UART_Receive_IT+0x50>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d113      	bne.n	8003658 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003646:	b29a      	uxth	r2, r3
 8003648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	1c9a      	adds	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	629a      	str	r2, [r3, #40]	@ 0x28
 8003656:	e026      	b.n	80036a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800366a:	d007      	beq.n	800367c <UART_Receive_IT+0x74>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <UART_Receive_IT+0x82>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003686:	701a      	strb	r2, [r3, #0]
 8003688:	e008      	b.n	800369c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003696:	b2da      	uxtb	r2, r3
 8003698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4619      	mov	r1, r3
 80036b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d15d      	bne.n	8003776 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0220 	bic.w	r2, r2, #32
 80036c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d135      	bne.n	800376c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	613b      	str	r3, [r7, #16]
   return(result);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f023 0310 	bic.w	r3, r3, #16
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003726:	623a      	str	r2, [r7, #32]
 8003728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	69f9      	ldr	r1, [r7, #28]
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	61bb      	str	r3, [r7, #24]
   return(result);
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e5      	bne.n	8003706 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b10      	cmp	r3, #16
 8003746:	d10a      	bne.n	800375e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff fdd1 	bl	800330c <HAL_UARTEx_RxEventCallback>
 800376a:	e002      	b.n	8003772 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fd f997 	bl	8000aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e002      	b.n	800377c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
  }
}
 800377c:	4618      	mov	r0, r3
 800377e:	3730      	adds	r7, #48	@ 0x30
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003788:	b0c0      	sub	sp, #256	@ 0x100
 800378a:	af00      	add	r7, sp, #0
 800378c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a0:	68d9      	ldr	r1, [r3, #12]
 80037a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	ea40 0301 	orr.w	r3, r0, r1
 80037ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037dc:	f021 010c 	bic.w	r1, r1, #12
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037ea:	430b      	orrs	r3, r1
 80037ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fe:	6999      	ldr	r1, [r3, #24]
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	ea40 0301 	orr.w	r3, r0, r1
 800380a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b8f      	ldr	r3, [pc, #572]	@ (8003a50 <UART_SetConfig+0x2cc>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d005      	beq.n	8003824 <UART_SetConfig+0xa0>
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a54 <UART_SetConfig+0x2d0>)
 8003820:	429a      	cmp	r2, r3
 8003822:	d104      	bne.n	800382e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003824:	f7ff f9b8 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 8003828:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800382c:	e003      	b.n	8003836 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800382e:	f7ff f99f 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003832:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003840:	f040 810c 	bne.w	8003a5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003848:	2200      	movs	r2, #0
 800384a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800384e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003852:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003856:	4622      	mov	r2, r4
 8003858:	462b      	mov	r3, r5
 800385a:	1891      	adds	r1, r2, r2
 800385c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800385e:	415b      	adcs	r3, r3
 8003860:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003862:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003866:	4621      	mov	r1, r4
 8003868:	eb12 0801 	adds.w	r8, r2, r1
 800386c:	4629      	mov	r1, r5
 800386e:	eb43 0901 	adc.w	r9, r3, r1
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800387e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003886:	4690      	mov	r8, r2
 8003888:	4699      	mov	r9, r3
 800388a:	4623      	mov	r3, r4
 800388c:	eb18 0303 	adds.w	r3, r8, r3
 8003890:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003894:	462b      	mov	r3, r5
 8003896:	eb49 0303 	adc.w	r3, r9, r3
 800389a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038b2:	460b      	mov	r3, r1
 80038b4:	18db      	adds	r3, r3, r3
 80038b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038b8:	4613      	mov	r3, r2
 80038ba:	eb42 0303 	adc.w	r3, r2, r3
 80038be:	657b      	str	r3, [r7, #84]	@ 0x54
 80038c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038c8:	f7fc fcd2 	bl	8000270 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4b61      	ldr	r3, [pc, #388]	@ (8003a58 <UART_SetConfig+0x2d4>)
 80038d2:	fba3 2302 	umull	r2, r3, r3, r2
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	011c      	lsls	r4, r3, #4
 80038da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038ec:	4642      	mov	r2, r8
 80038ee:	464b      	mov	r3, r9
 80038f0:	1891      	adds	r1, r2, r2
 80038f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038f4:	415b      	adcs	r3, r3
 80038f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038fc:	4641      	mov	r1, r8
 80038fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003902:	4649      	mov	r1, r9
 8003904:	eb43 0b01 	adc.w	fp, r3, r1
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003914:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800391c:	4692      	mov	sl, r2
 800391e:	469b      	mov	fp, r3
 8003920:	4643      	mov	r3, r8
 8003922:	eb1a 0303 	adds.w	r3, sl, r3
 8003926:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800392a:	464b      	mov	r3, r9
 800392c:	eb4b 0303 	adc.w	r3, fp, r3
 8003930:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003940:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003944:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003948:	460b      	mov	r3, r1
 800394a:	18db      	adds	r3, r3, r3
 800394c:	643b      	str	r3, [r7, #64]	@ 0x40
 800394e:	4613      	mov	r3, r2
 8003950:	eb42 0303 	adc.w	r3, r2, r3
 8003954:	647b      	str	r3, [r7, #68]	@ 0x44
 8003956:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800395a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800395e:	f7fc fc87 	bl	8000270 <__aeabi_uldivmod>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4611      	mov	r1, r2
 8003968:	4b3b      	ldr	r3, [pc, #236]	@ (8003a58 <UART_SetConfig+0x2d4>)
 800396a:	fba3 2301 	umull	r2, r3, r3, r1
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2264      	movs	r2, #100	@ 0x64
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	1acb      	subs	r3, r1, r3
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800397e:	4b36      	ldr	r3, [pc, #216]	@ (8003a58 <UART_SetConfig+0x2d4>)
 8003980:	fba3 2302 	umull	r2, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800398c:	441c      	add	r4, r3
 800398e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003998:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800399c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039a0:	4642      	mov	r2, r8
 80039a2:	464b      	mov	r3, r9
 80039a4:	1891      	adds	r1, r2, r2
 80039a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039a8:	415b      	adcs	r3, r3
 80039aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039b0:	4641      	mov	r1, r8
 80039b2:	1851      	adds	r1, r2, r1
 80039b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80039b6:	4649      	mov	r1, r9
 80039b8:	414b      	adcs	r3, r1
 80039ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039c8:	4659      	mov	r1, fp
 80039ca:	00cb      	lsls	r3, r1, #3
 80039cc:	4651      	mov	r1, sl
 80039ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d2:	4651      	mov	r1, sl
 80039d4:	00ca      	lsls	r2, r1, #3
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	4642      	mov	r2, r8
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039e4:	464b      	mov	r3, r9
 80039e6:	460a      	mov	r2, r1
 80039e8:	eb42 0303 	adc.w	r3, r2, r3
 80039ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a04:	460b      	mov	r3, r1
 8003a06:	18db      	adds	r3, r3, r3
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a1a:	f7fc fc29 	bl	8000270 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <UART_SetConfig+0x2d4>)
 8003a24:	fba3 1302 	umull	r1, r3, r3, r2
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	2164      	movs	r1, #100	@ 0x64
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	3332      	adds	r3, #50	@ 0x32
 8003a36:	4a08      	ldr	r2, [pc, #32]	@ (8003a58 <UART_SetConfig+0x2d4>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	f003 0207 	and.w	r2, r3, #7
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4422      	add	r2, r4
 8003a4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a4c:	e106      	b.n	8003c5c <UART_SetConfig+0x4d8>
 8003a4e:	bf00      	nop
 8003a50:	40011000 	.word	0x40011000
 8003a54:	40011400 	.word	0x40011400
 8003a58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a6e:	4642      	mov	r2, r8
 8003a70:	464b      	mov	r3, r9
 8003a72:	1891      	adds	r1, r2, r2
 8003a74:	6239      	str	r1, [r7, #32]
 8003a76:	415b      	adcs	r3, r3
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a7e:	4641      	mov	r1, r8
 8003a80:	1854      	adds	r4, r2, r1
 8003a82:	4649      	mov	r1, r9
 8003a84:	eb43 0501 	adc.w	r5, r3, r1
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	00eb      	lsls	r3, r5, #3
 8003a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a96:	00e2      	lsls	r2, r4, #3
 8003a98:	4614      	mov	r4, r2
 8003a9a:	461d      	mov	r5, r3
 8003a9c:	4643      	mov	r3, r8
 8003a9e:	18e3      	adds	r3, r4, r3
 8003aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	eb45 0303 	adc.w	r3, r5, r3
 8003aaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003aba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003aca:	4629      	mov	r1, r5
 8003acc:	008b      	lsls	r3, r1, #2
 8003ace:	4621      	mov	r1, r4
 8003ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	008a      	lsls	r2, r1, #2
 8003ad8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003adc:	f7fc fbc8 	bl	8000270 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4b60      	ldr	r3, [pc, #384]	@ (8003c68 <UART_SetConfig+0x4e4>)
 8003ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	011c      	lsls	r4, r3, #4
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003af8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003afc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	1891      	adds	r1, r2, r2
 8003b06:	61b9      	str	r1, [r7, #24]
 8003b08:	415b      	adcs	r3, r3
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b10:	4641      	mov	r1, r8
 8003b12:	1851      	adds	r1, r2, r1
 8003b14:	6139      	str	r1, [r7, #16]
 8003b16:	4649      	mov	r1, r9
 8003b18:	414b      	adcs	r3, r1
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b28:	4659      	mov	r1, fp
 8003b2a:	00cb      	lsls	r3, r1, #3
 8003b2c:	4651      	mov	r1, sl
 8003b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b32:	4651      	mov	r1, sl
 8003b34:	00ca      	lsls	r2, r1, #3
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	189b      	adds	r3, r3, r2
 8003b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b44:	464b      	mov	r3, r9
 8003b46:	460a      	mov	r2, r1
 8003b48:	eb42 0303 	adc.w	r3, r2, r3
 8003b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b68:	4649      	mov	r1, r9
 8003b6a:	008b      	lsls	r3, r1, #2
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b72:	4641      	mov	r1, r8
 8003b74:	008a      	lsls	r2, r1, #2
 8003b76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b7a:	f7fc fb79 	bl	8000270 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	4b38      	ldr	r3, [pc, #224]	@ (8003c68 <UART_SetConfig+0x4e4>)
 8003b86:	fba3 2301 	umull	r2, r3, r3, r1
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2264      	movs	r2, #100	@ 0x64
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	1acb      	subs	r3, r1, r3
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	3332      	adds	r3, #50	@ 0x32
 8003b98:	4a33      	ldr	r2, [pc, #204]	@ (8003c68 <UART_SetConfig+0x4e4>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ba4:	441c      	add	r4, r3
 8003ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003baa:	2200      	movs	r2, #0
 8003bac:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bae:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	1891      	adds	r1, r2, r2
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	415b      	adcs	r3, r3
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	1851      	adds	r1, r2, r1
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	4649      	mov	r1, r9
 8003bcc:	414b      	adcs	r3, r1
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bdc:	4659      	mov	r1, fp
 8003bde:	00cb      	lsls	r3, r1, #3
 8003be0:	4651      	mov	r1, sl
 8003be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be6:	4651      	mov	r1, sl
 8003be8:	00ca      	lsls	r2, r1, #3
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	eb42 0303 	adc.w	r3, r2, r3
 8003bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c18:	4649      	mov	r1, r9
 8003c1a:	008b      	lsls	r3, r1, #2
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c22:	4641      	mov	r1, r8
 8003c24:	008a      	lsls	r2, r1, #2
 8003c26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c2a:	f7fc fb21 	bl	8000270 <__aeabi_uldivmod>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <UART_SetConfig+0x4e4>)
 8003c34:	fba3 1302 	umull	r1, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	2164      	movs	r1, #100	@ 0x64
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	3332      	adds	r3, #50	@ 0x32
 8003c46:	4a08      	ldr	r2, [pc, #32]	@ (8003c68 <UART_SetConfig+0x4e4>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	f003 020f 	and.w	r2, r3, #15
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4422      	add	r2, r4
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c62:	46bd      	mov	sp, r7
 8003c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c68:	51eb851f 	.word	0x51eb851f

08003c6c <siprintf>:
 8003c6c:	b40e      	push	{r1, r2, r3}
 8003c6e:	b500      	push	{lr}
 8003c70:	b09c      	sub	sp, #112	@ 0x70
 8003c72:	ab1d      	add	r3, sp, #116	@ 0x74
 8003c74:	9002      	str	r0, [sp, #8]
 8003c76:	9006      	str	r0, [sp, #24]
 8003c78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c7c:	4809      	ldr	r0, [pc, #36]	@ (8003ca4 <siprintf+0x38>)
 8003c7e:	9107      	str	r1, [sp, #28]
 8003c80:	9104      	str	r1, [sp, #16]
 8003c82:	4909      	ldr	r1, [pc, #36]	@ (8003ca8 <siprintf+0x3c>)
 8003c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c88:	9105      	str	r1, [sp, #20]
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	a902      	add	r1, sp, #8
 8003c90:	f000 f994 	bl	8003fbc <_svfiprintf_r>
 8003c94:	9b02      	ldr	r3, [sp, #8]
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	b01c      	add	sp, #112	@ 0x70
 8003c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ca0:	b003      	add	sp, #12
 8003ca2:	4770      	bx	lr
 8003ca4:	2000002c 	.word	0x2000002c
 8003ca8:	ffff0208 	.word	0xffff0208

08003cac <memset>:
 8003cac:	4402      	add	r2, r0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <__errno>:
 8003cbc:	4b01      	ldr	r3, [pc, #4]	@ (8003cc4 <__errno+0x8>)
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	2000002c 	.word	0x2000002c

08003cc8 <__libc_init_array>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	4d0d      	ldr	r5, [pc, #52]	@ (8003d00 <__libc_init_array+0x38>)
 8003ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8003d04 <__libc_init_array+0x3c>)
 8003cce:	1b64      	subs	r4, r4, r5
 8003cd0:	10a4      	asrs	r4, r4, #2
 8003cd2:	2600      	movs	r6, #0
 8003cd4:	42a6      	cmp	r6, r4
 8003cd6:	d109      	bne.n	8003cec <__libc_init_array+0x24>
 8003cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8003d08 <__libc_init_array+0x40>)
 8003cda:	4c0c      	ldr	r4, [pc, #48]	@ (8003d0c <__libc_init_array+0x44>)
 8003cdc:	f000 fc66 	bl	80045ac <_init>
 8003ce0:	1b64      	subs	r4, r4, r5
 8003ce2:	10a4      	asrs	r4, r4, #2
 8003ce4:	2600      	movs	r6, #0
 8003ce6:	42a6      	cmp	r6, r4
 8003ce8:	d105      	bne.n	8003cf6 <__libc_init_array+0x2e>
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf0:	4798      	blx	r3
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	e7ee      	b.n	8003cd4 <__libc_init_array+0xc>
 8003cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfa:	4798      	blx	r3
 8003cfc:	3601      	adds	r6, #1
 8003cfe:	e7f2      	b.n	8003ce6 <__libc_init_array+0x1e>
 8003d00:	0800464c 	.word	0x0800464c
 8003d04:	0800464c 	.word	0x0800464c
 8003d08:	0800464c 	.word	0x0800464c
 8003d0c:	08004650 	.word	0x08004650

08003d10 <__retarget_lock_acquire_recursive>:
 8003d10:	4770      	bx	lr

08003d12 <__retarget_lock_release_recursive>:
 8003d12:	4770      	bx	lr

08003d14 <_free_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4605      	mov	r5, r0
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	d041      	beq.n	8003da0 <_free_r+0x8c>
 8003d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d20:	1f0c      	subs	r4, r1, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bfb8      	it	lt
 8003d26:	18e4      	addlt	r4, r4, r3
 8003d28:	f000 f8e0 	bl	8003eec <__malloc_lock>
 8003d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003da4 <_free_r+0x90>)
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	b933      	cbnz	r3, 8003d40 <_free_r+0x2c>
 8003d32:	6063      	str	r3, [r4, #4]
 8003d34:	6014      	str	r4, [r2, #0]
 8003d36:	4628      	mov	r0, r5
 8003d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d3c:	f000 b8dc 	b.w	8003ef8 <__malloc_unlock>
 8003d40:	42a3      	cmp	r3, r4
 8003d42:	d908      	bls.n	8003d56 <_free_r+0x42>
 8003d44:	6820      	ldr	r0, [r4, #0]
 8003d46:	1821      	adds	r1, r4, r0
 8003d48:	428b      	cmp	r3, r1
 8003d4a:	bf01      	itttt	eq
 8003d4c:	6819      	ldreq	r1, [r3, #0]
 8003d4e:	685b      	ldreq	r3, [r3, #4]
 8003d50:	1809      	addeq	r1, r1, r0
 8003d52:	6021      	streq	r1, [r4, #0]
 8003d54:	e7ed      	b.n	8003d32 <_free_r+0x1e>
 8003d56:	461a      	mov	r2, r3
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	b10b      	cbz	r3, 8003d60 <_free_r+0x4c>
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	d9fa      	bls.n	8003d56 <_free_r+0x42>
 8003d60:	6811      	ldr	r1, [r2, #0]
 8003d62:	1850      	adds	r0, r2, r1
 8003d64:	42a0      	cmp	r0, r4
 8003d66:	d10b      	bne.n	8003d80 <_free_r+0x6c>
 8003d68:	6820      	ldr	r0, [r4, #0]
 8003d6a:	4401      	add	r1, r0
 8003d6c:	1850      	adds	r0, r2, r1
 8003d6e:	4283      	cmp	r3, r0
 8003d70:	6011      	str	r1, [r2, #0]
 8003d72:	d1e0      	bne.n	8003d36 <_free_r+0x22>
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	6053      	str	r3, [r2, #4]
 8003d7a:	4408      	add	r0, r1
 8003d7c:	6010      	str	r0, [r2, #0]
 8003d7e:	e7da      	b.n	8003d36 <_free_r+0x22>
 8003d80:	d902      	bls.n	8003d88 <_free_r+0x74>
 8003d82:	230c      	movs	r3, #12
 8003d84:	602b      	str	r3, [r5, #0]
 8003d86:	e7d6      	b.n	8003d36 <_free_r+0x22>
 8003d88:	6820      	ldr	r0, [r4, #0]
 8003d8a:	1821      	adds	r1, r4, r0
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	bf04      	itt	eq
 8003d90:	6819      	ldreq	r1, [r3, #0]
 8003d92:	685b      	ldreq	r3, [r3, #4]
 8003d94:	6063      	str	r3, [r4, #4]
 8003d96:	bf04      	itt	eq
 8003d98:	1809      	addeq	r1, r1, r0
 8003d9a:	6021      	streq	r1, [r4, #0]
 8003d9c:	6054      	str	r4, [r2, #4]
 8003d9e:	e7ca      	b.n	8003d36 <_free_r+0x22>
 8003da0:	bd38      	pop	{r3, r4, r5, pc}
 8003da2:	bf00      	nop
 8003da4:	20001344 	.word	0x20001344

08003da8 <sbrk_aligned>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4e0f      	ldr	r6, [pc, #60]	@ (8003de8 <sbrk_aligned+0x40>)
 8003dac:	460c      	mov	r4, r1
 8003dae:	6831      	ldr	r1, [r6, #0]
 8003db0:	4605      	mov	r5, r0
 8003db2:	b911      	cbnz	r1, 8003dba <sbrk_aligned+0x12>
 8003db4:	f000 fba6 	bl	8004504 <_sbrk_r>
 8003db8:	6030      	str	r0, [r6, #0]
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 fba1 	bl	8004504 <_sbrk_r>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d103      	bne.n	8003dce <sbrk_aligned+0x26>
 8003dc6:	f04f 34ff 	mov.w	r4, #4294967295
 8003dca:	4620      	mov	r0, r4
 8003dcc:	bd70      	pop	{r4, r5, r6, pc}
 8003dce:	1cc4      	adds	r4, r0, #3
 8003dd0:	f024 0403 	bic.w	r4, r4, #3
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d0f8      	beq.n	8003dca <sbrk_aligned+0x22>
 8003dd8:	1a21      	subs	r1, r4, r0
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f000 fb92 	bl	8004504 <_sbrk_r>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d1f2      	bne.n	8003dca <sbrk_aligned+0x22>
 8003de4:	e7ef      	b.n	8003dc6 <sbrk_aligned+0x1e>
 8003de6:	bf00      	nop
 8003de8:	20001340 	.word	0x20001340

08003dec <_malloc_r>:
 8003dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003df0:	1ccd      	adds	r5, r1, #3
 8003df2:	f025 0503 	bic.w	r5, r5, #3
 8003df6:	3508      	adds	r5, #8
 8003df8:	2d0c      	cmp	r5, #12
 8003dfa:	bf38      	it	cc
 8003dfc:	250c      	movcc	r5, #12
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	4606      	mov	r6, r0
 8003e02:	db01      	blt.n	8003e08 <_malloc_r+0x1c>
 8003e04:	42a9      	cmp	r1, r5
 8003e06:	d904      	bls.n	8003e12 <_malloc_r+0x26>
 8003e08:	230c      	movs	r3, #12
 8003e0a:	6033      	str	r3, [r6, #0]
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ee8 <_malloc_r+0xfc>
 8003e16:	f000 f869 	bl	8003eec <__malloc_lock>
 8003e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e1e:	461c      	mov	r4, r3
 8003e20:	bb44      	cbnz	r4, 8003e74 <_malloc_r+0x88>
 8003e22:	4629      	mov	r1, r5
 8003e24:	4630      	mov	r0, r6
 8003e26:	f7ff ffbf 	bl	8003da8 <sbrk_aligned>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	d158      	bne.n	8003ee2 <_malloc_r+0xf6>
 8003e30:	f8d8 4000 	ldr.w	r4, [r8]
 8003e34:	4627      	mov	r7, r4
 8003e36:	2f00      	cmp	r7, #0
 8003e38:	d143      	bne.n	8003ec2 <_malloc_r+0xd6>
 8003e3a:	2c00      	cmp	r4, #0
 8003e3c:	d04b      	beq.n	8003ed6 <_malloc_r+0xea>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	4639      	mov	r1, r7
 8003e42:	4630      	mov	r0, r6
 8003e44:	eb04 0903 	add.w	r9, r4, r3
 8003e48:	f000 fb5c 	bl	8004504 <_sbrk_r>
 8003e4c:	4581      	cmp	r9, r0
 8003e4e:	d142      	bne.n	8003ed6 <_malloc_r+0xea>
 8003e50:	6821      	ldr	r1, [r4, #0]
 8003e52:	1a6d      	subs	r5, r5, r1
 8003e54:	4629      	mov	r1, r5
 8003e56:	4630      	mov	r0, r6
 8003e58:	f7ff ffa6 	bl	8003da8 <sbrk_aligned>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d03a      	beq.n	8003ed6 <_malloc_r+0xea>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	442b      	add	r3, r5
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	f8d8 3000 	ldr.w	r3, [r8]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	bb62      	cbnz	r2, 8003ec8 <_malloc_r+0xdc>
 8003e6e:	f8c8 7000 	str.w	r7, [r8]
 8003e72:	e00f      	b.n	8003e94 <_malloc_r+0xa8>
 8003e74:	6822      	ldr	r2, [r4, #0]
 8003e76:	1b52      	subs	r2, r2, r5
 8003e78:	d420      	bmi.n	8003ebc <_malloc_r+0xd0>
 8003e7a:	2a0b      	cmp	r2, #11
 8003e7c:	d917      	bls.n	8003eae <_malloc_r+0xc2>
 8003e7e:	1961      	adds	r1, r4, r5
 8003e80:	42a3      	cmp	r3, r4
 8003e82:	6025      	str	r5, [r4, #0]
 8003e84:	bf18      	it	ne
 8003e86:	6059      	strne	r1, [r3, #4]
 8003e88:	6863      	ldr	r3, [r4, #4]
 8003e8a:	bf08      	it	eq
 8003e8c:	f8c8 1000 	streq.w	r1, [r8]
 8003e90:	5162      	str	r2, [r4, r5]
 8003e92:	604b      	str	r3, [r1, #4]
 8003e94:	4630      	mov	r0, r6
 8003e96:	f000 f82f 	bl	8003ef8 <__malloc_unlock>
 8003e9a:	f104 000b 	add.w	r0, r4, #11
 8003e9e:	1d23      	adds	r3, r4, #4
 8003ea0:	f020 0007 	bic.w	r0, r0, #7
 8003ea4:	1ac2      	subs	r2, r0, r3
 8003ea6:	bf1c      	itt	ne
 8003ea8:	1a1b      	subne	r3, r3, r0
 8003eaa:	50a3      	strne	r3, [r4, r2]
 8003eac:	e7af      	b.n	8003e0e <_malloc_r+0x22>
 8003eae:	6862      	ldr	r2, [r4, #4]
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	bf0c      	ite	eq
 8003eb4:	f8c8 2000 	streq.w	r2, [r8]
 8003eb8:	605a      	strne	r2, [r3, #4]
 8003eba:	e7eb      	b.n	8003e94 <_malloc_r+0xa8>
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	6864      	ldr	r4, [r4, #4]
 8003ec0:	e7ae      	b.n	8003e20 <_malloc_r+0x34>
 8003ec2:	463c      	mov	r4, r7
 8003ec4:	687f      	ldr	r7, [r7, #4]
 8003ec6:	e7b6      	b.n	8003e36 <_malloc_r+0x4a>
 8003ec8:	461a      	mov	r2, r3
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	42a3      	cmp	r3, r4
 8003ece:	d1fb      	bne.n	8003ec8 <_malloc_r+0xdc>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6053      	str	r3, [r2, #4]
 8003ed4:	e7de      	b.n	8003e94 <_malloc_r+0xa8>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	4630      	mov	r0, r6
 8003edc:	f000 f80c 	bl	8003ef8 <__malloc_unlock>
 8003ee0:	e794      	b.n	8003e0c <_malloc_r+0x20>
 8003ee2:	6005      	str	r5, [r0, #0]
 8003ee4:	e7d6      	b.n	8003e94 <_malloc_r+0xa8>
 8003ee6:	bf00      	nop
 8003ee8:	20001344 	.word	0x20001344

08003eec <__malloc_lock>:
 8003eec:	4801      	ldr	r0, [pc, #4]	@ (8003ef4 <__malloc_lock+0x8>)
 8003eee:	f7ff bf0f 	b.w	8003d10 <__retarget_lock_acquire_recursive>
 8003ef2:	bf00      	nop
 8003ef4:	2000133c 	.word	0x2000133c

08003ef8 <__malloc_unlock>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	@ (8003f00 <__malloc_unlock+0x8>)
 8003efa:	f7ff bf0a 	b.w	8003d12 <__retarget_lock_release_recursive>
 8003efe:	bf00      	nop
 8003f00:	2000133c 	.word	0x2000133c

08003f04 <__ssputs_r>:
 8003f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f08:	688e      	ldr	r6, [r1, #8]
 8003f0a:	461f      	mov	r7, r3
 8003f0c:	42be      	cmp	r6, r7
 8003f0e:	680b      	ldr	r3, [r1, #0]
 8003f10:	4682      	mov	sl, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	4690      	mov	r8, r2
 8003f16:	d82d      	bhi.n	8003f74 <__ssputs_r+0x70>
 8003f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f20:	d026      	beq.n	8003f70 <__ssputs_r+0x6c>
 8003f22:	6965      	ldr	r5, [r4, #20]
 8003f24:	6909      	ldr	r1, [r1, #16]
 8003f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f2a:	eba3 0901 	sub.w	r9, r3, r1
 8003f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f32:	1c7b      	adds	r3, r7, #1
 8003f34:	444b      	add	r3, r9
 8003f36:	106d      	asrs	r5, r5, #1
 8003f38:	429d      	cmp	r5, r3
 8003f3a:	bf38      	it	cc
 8003f3c:	461d      	movcc	r5, r3
 8003f3e:	0553      	lsls	r3, r2, #21
 8003f40:	d527      	bpl.n	8003f92 <__ssputs_r+0x8e>
 8003f42:	4629      	mov	r1, r5
 8003f44:	f7ff ff52 	bl	8003dec <_malloc_r>
 8003f48:	4606      	mov	r6, r0
 8003f4a:	b360      	cbz	r0, 8003fa6 <__ssputs_r+0xa2>
 8003f4c:	6921      	ldr	r1, [r4, #16]
 8003f4e:	464a      	mov	r2, r9
 8003f50:	f000 fae8 	bl	8004524 <memcpy>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5e:	81a3      	strh	r3, [r4, #12]
 8003f60:	6126      	str	r6, [r4, #16]
 8003f62:	6165      	str	r5, [r4, #20]
 8003f64:	444e      	add	r6, r9
 8003f66:	eba5 0509 	sub.w	r5, r5, r9
 8003f6a:	6026      	str	r6, [r4, #0]
 8003f6c:	60a5      	str	r5, [r4, #8]
 8003f6e:	463e      	mov	r6, r7
 8003f70:	42be      	cmp	r6, r7
 8003f72:	d900      	bls.n	8003f76 <__ssputs_r+0x72>
 8003f74:	463e      	mov	r6, r7
 8003f76:	6820      	ldr	r0, [r4, #0]
 8003f78:	4632      	mov	r2, r6
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	f000 faa8 	bl	80044d0 <memmove>
 8003f80:	68a3      	ldr	r3, [r4, #8]
 8003f82:	1b9b      	subs	r3, r3, r6
 8003f84:	60a3      	str	r3, [r4, #8]
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	4433      	add	r3, r6
 8003f8a:	6023      	str	r3, [r4, #0]
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f92:	462a      	mov	r2, r5
 8003f94:	f000 fad4 	bl	8004540 <_realloc_r>
 8003f98:	4606      	mov	r6, r0
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d1e0      	bne.n	8003f60 <__ssputs_r+0x5c>
 8003f9e:	6921      	ldr	r1, [r4, #16]
 8003fa0:	4650      	mov	r0, sl
 8003fa2:	f7ff feb7 	bl	8003d14 <_free_r>
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	f8ca 3000 	str.w	r3, [sl]
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e7e9      	b.n	8003f8e <__ssputs_r+0x8a>
	...

08003fbc <_svfiprintf_r>:
 8003fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc0:	4698      	mov	r8, r3
 8003fc2:	898b      	ldrh	r3, [r1, #12]
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	b09d      	sub	sp, #116	@ 0x74
 8003fc8:	4607      	mov	r7, r0
 8003fca:	460d      	mov	r5, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	d510      	bpl.n	8003ff2 <_svfiprintf_r+0x36>
 8003fd0:	690b      	ldr	r3, [r1, #16]
 8003fd2:	b973      	cbnz	r3, 8003ff2 <_svfiprintf_r+0x36>
 8003fd4:	2140      	movs	r1, #64	@ 0x40
 8003fd6:	f7ff ff09 	bl	8003dec <_malloc_r>
 8003fda:	6028      	str	r0, [r5, #0]
 8003fdc:	6128      	str	r0, [r5, #16]
 8003fde:	b930      	cbnz	r0, 8003fee <_svfiprintf_r+0x32>
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	b01d      	add	sp, #116	@ 0x74
 8003fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fee:	2340      	movs	r3, #64	@ 0x40
 8003ff0:	616b      	str	r3, [r5, #20]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004000:	2330      	movs	r3, #48	@ 0x30
 8004002:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041a0 <_svfiprintf_r+0x1e4>
 8004006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800400a:	f04f 0901 	mov.w	r9, #1
 800400e:	4623      	mov	r3, r4
 8004010:	469a      	mov	sl, r3
 8004012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004016:	b10a      	cbz	r2, 800401c <_svfiprintf_r+0x60>
 8004018:	2a25      	cmp	r2, #37	@ 0x25
 800401a:	d1f9      	bne.n	8004010 <_svfiprintf_r+0x54>
 800401c:	ebba 0b04 	subs.w	fp, sl, r4
 8004020:	d00b      	beq.n	800403a <_svfiprintf_r+0x7e>
 8004022:	465b      	mov	r3, fp
 8004024:	4622      	mov	r2, r4
 8004026:	4629      	mov	r1, r5
 8004028:	4638      	mov	r0, r7
 800402a:	f7ff ff6b 	bl	8003f04 <__ssputs_r>
 800402e:	3001      	adds	r0, #1
 8004030:	f000 80a7 	beq.w	8004182 <_svfiprintf_r+0x1c6>
 8004034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004036:	445a      	add	r2, fp
 8004038:	9209      	str	r2, [sp, #36]	@ 0x24
 800403a:	f89a 3000 	ldrb.w	r3, [sl]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 809f 	beq.w	8004182 <_svfiprintf_r+0x1c6>
 8004044:	2300      	movs	r3, #0
 8004046:	f04f 32ff 	mov.w	r2, #4294967295
 800404a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800404e:	f10a 0a01 	add.w	sl, sl, #1
 8004052:	9304      	str	r3, [sp, #16]
 8004054:	9307      	str	r3, [sp, #28]
 8004056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800405a:	931a      	str	r3, [sp, #104]	@ 0x68
 800405c:	4654      	mov	r4, sl
 800405e:	2205      	movs	r2, #5
 8004060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004064:	484e      	ldr	r0, [pc, #312]	@ (80041a0 <_svfiprintf_r+0x1e4>)
 8004066:	f7fc f8b3 	bl	80001d0 <memchr>
 800406a:	9a04      	ldr	r2, [sp, #16]
 800406c:	b9d8      	cbnz	r0, 80040a6 <_svfiprintf_r+0xea>
 800406e:	06d0      	lsls	r0, r2, #27
 8004070:	bf44      	itt	mi
 8004072:	2320      	movmi	r3, #32
 8004074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004078:	0711      	lsls	r1, r2, #28
 800407a:	bf44      	itt	mi
 800407c:	232b      	movmi	r3, #43	@ 0x2b
 800407e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004082:	f89a 3000 	ldrb.w	r3, [sl]
 8004086:	2b2a      	cmp	r3, #42	@ 0x2a
 8004088:	d015      	beq.n	80040b6 <_svfiprintf_r+0xfa>
 800408a:	9a07      	ldr	r2, [sp, #28]
 800408c:	4654      	mov	r4, sl
 800408e:	2000      	movs	r0, #0
 8004090:	f04f 0c0a 	mov.w	ip, #10
 8004094:	4621      	mov	r1, r4
 8004096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800409a:	3b30      	subs	r3, #48	@ 0x30
 800409c:	2b09      	cmp	r3, #9
 800409e:	d94b      	bls.n	8004138 <_svfiprintf_r+0x17c>
 80040a0:	b1b0      	cbz	r0, 80040d0 <_svfiprintf_r+0x114>
 80040a2:	9207      	str	r2, [sp, #28]
 80040a4:	e014      	b.n	80040d0 <_svfiprintf_r+0x114>
 80040a6:	eba0 0308 	sub.w	r3, r0, r8
 80040aa:	fa09 f303 	lsl.w	r3, r9, r3
 80040ae:	4313      	orrs	r3, r2
 80040b0:	9304      	str	r3, [sp, #16]
 80040b2:	46a2      	mov	sl, r4
 80040b4:	e7d2      	b.n	800405c <_svfiprintf_r+0xa0>
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	1d19      	adds	r1, r3, #4
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	9103      	str	r1, [sp, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bfbb      	ittet	lt
 80040c2:	425b      	neglt	r3, r3
 80040c4:	f042 0202 	orrlt.w	r2, r2, #2
 80040c8:	9307      	strge	r3, [sp, #28]
 80040ca:	9307      	strlt	r3, [sp, #28]
 80040cc:	bfb8      	it	lt
 80040ce:	9204      	strlt	r2, [sp, #16]
 80040d0:	7823      	ldrb	r3, [r4, #0]
 80040d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80040d4:	d10a      	bne.n	80040ec <_svfiprintf_r+0x130>
 80040d6:	7863      	ldrb	r3, [r4, #1]
 80040d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80040da:	d132      	bne.n	8004142 <_svfiprintf_r+0x186>
 80040dc:	9b03      	ldr	r3, [sp, #12]
 80040de:	1d1a      	adds	r2, r3, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	9203      	str	r2, [sp, #12]
 80040e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040e8:	3402      	adds	r4, #2
 80040ea:	9305      	str	r3, [sp, #20]
 80040ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041b0 <_svfiprintf_r+0x1f4>
 80040f0:	7821      	ldrb	r1, [r4, #0]
 80040f2:	2203      	movs	r2, #3
 80040f4:	4650      	mov	r0, sl
 80040f6:	f7fc f86b 	bl	80001d0 <memchr>
 80040fa:	b138      	cbz	r0, 800410c <_svfiprintf_r+0x150>
 80040fc:	9b04      	ldr	r3, [sp, #16]
 80040fe:	eba0 000a 	sub.w	r0, r0, sl
 8004102:	2240      	movs	r2, #64	@ 0x40
 8004104:	4082      	lsls	r2, r0
 8004106:	4313      	orrs	r3, r2
 8004108:	3401      	adds	r4, #1
 800410a:	9304      	str	r3, [sp, #16]
 800410c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004110:	4824      	ldr	r0, [pc, #144]	@ (80041a4 <_svfiprintf_r+0x1e8>)
 8004112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004116:	2206      	movs	r2, #6
 8004118:	f7fc f85a 	bl	80001d0 <memchr>
 800411c:	2800      	cmp	r0, #0
 800411e:	d036      	beq.n	800418e <_svfiprintf_r+0x1d2>
 8004120:	4b21      	ldr	r3, [pc, #132]	@ (80041a8 <_svfiprintf_r+0x1ec>)
 8004122:	bb1b      	cbnz	r3, 800416c <_svfiprintf_r+0x1b0>
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	3307      	adds	r3, #7
 8004128:	f023 0307 	bic.w	r3, r3, #7
 800412c:	3308      	adds	r3, #8
 800412e:	9303      	str	r3, [sp, #12]
 8004130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004132:	4433      	add	r3, r6
 8004134:	9309      	str	r3, [sp, #36]	@ 0x24
 8004136:	e76a      	b.n	800400e <_svfiprintf_r+0x52>
 8004138:	fb0c 3202 	mla	r2, ip, r2, r3
 800413c:	460c      	mov	r4, r1
 800413e:	2001      	movs	r0, #1
 8004140:	e7a8      	b.n	8004094 <_svfiprintf_r+0xd8>
 8004142:	2300      	movs	r3, #0
 8004144:	3401      	adds	r4, #1
 8004146:	9305      	str	r3, [sp, #20]
 8004148:	4619      	mov	r1, r3
 800414a:	f04f 0c0a 	mov.w	ip, #10
 800414e:	4620      	mov	r0, r4
 8004150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004154:	3a30      	subs	r2, #48	@ 0x30
 8004156:	2a09      	cmp	r2, #9
 8004158:	d903      	bls.n	8004162 <_svfiprintf_r+0x1a6>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0c6      	beq.n	80040ec <_svfiprintf_r+0x130>
 800415e:	9105      	str	r1, [sp, #20]
 8004160:	e7c4      	b.n	80040ec <_svfiprintf_r+0x130>
 8004162:	fb0c 2101 	mla	r1, ip, r1, r2
 8004166:	4604      	mov	r4, r0
 8004168:	2301      	movs	r3, #1
 800416a:	e7f0      	b.n	800414e <_svfiprintf_r+0x192>
 800416c:	ab03      	add	r3, sp, #12
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	462a      	mov	r2, r5
 8004172:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <_svfiprintf_r+0x1f0>)
 8004174:	a904      	add	r1, sp, #16
 8004176:	4638      	mov	r0, r7
 8004178:	f3af 8000 	nop.w
 800417c:	1c42      	adds	r2, r0, #1
 800417e:	4606      	mov	r6, r0
 8004180:	d1d6      	bne.n	8004130 <_svfiprintf_r+0x174>
 8004182:	89ab      	ldrh	r3, [r5, #12]
 8004184:	065b      	lsls	r3, r3, #25
 8004186:	f53f af2d 	bmi.w	8003fe4 <_svfiprintf_r+0x28>
 800418a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800418c:	e72c      	b.n	8003fe8 <_svfiprintf_r+0x2c>
 800418e:	ab03      	add	r3, sp, #12
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	462a      	mov	r2, r5
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <_svfiprintf_r+0x1f0>)
 8004196:	a904      	add	r1, sp, #16
 8004198:	4638      	mov	r0, r7
 800419a:	f000 f879 	bl	8004290 <_printf_i>
 800419e:	e7ed      	b.n	800417c <_svfiprintf_r+0x1c0>
 80041a0:	08004610 	.word	0x08004610
 80041a4:	0800461a 	.word	0x0800461a
 80041a8:	00000000 	.word	0x00000000
 80041ac:	08003f05 	.word	0x08003f05
 80041b0:	08004616 	.word	0x08004616

080041b4 <_printf_common>:
 80041b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b8:	4616      	mov	r6, r2
 80041ba:	4698      	mov	r8, r3
 80041bc:	688a      	ldr	r2, [r1, #8]
 80041be:	690b      	ldr	r3, [r1, #16]
 80041c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bfb8      	it	lt
 80041c8:	4613      	movlt	r3, r2
 80041ca:	6033      	str	r3, [r6, #0]
 80041cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041d0:	4607      	mov	r7, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	b10a      	cbz	r2, 80041da <_printf_common+0x26>
 80041d6:	3301      	adds	r3, #1
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	0699      	lsls	r1, r3, #26
 80041de:	bf42      	ittt	mi
 80041e0:	6833      	ldrmi	r3, [r6, #0]
 80041e2:	3302      	addmi	r3, #2
 80041e4:	6033      	strmi	r3, [r6, #0]
 80041e6:	6825      	ldr	r5, [r4, #0]
 80041e8:	f015 0506 	ands.w	r5, r5, #6
 80041ec:	d106      	bne.n	80041fc <_printf_common+0x48>
 80041ee:	f104 0a19 	add.w	sl, r4, #25
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	6832      	ldr	r2, [r6, #0]
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	42ab      	cmp	r3, r5
 80041fa:	dc26      	bgt.n	800424a <_printf_common+0x96>
 80041fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004200:	6822      	ldr	r2, [r4, #0]
 8004202:	3b00      	subs	r3, #0
 8004204:	bf18      	it	ne
 8004206:	2301      	movne	r3, #1
 8004208:	0692      	lsls	r2, r2, #26
 800420a:	d42b      	bmi.n	8004264 <_printf_common+0xb0>
 800420c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004210:	4641      	mov	r1, r8
 8004212:	4638      	mov	r0, r7
 8004214:	47c8      	blx	r9
 8004216:	3001      	adds	r0, #1
 8004218:	d01e      	beq.n	8004258 <_printf_common+0xa4>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	6922      	ldr	r2, [r4, #16]
 800421e:	f003 0306 	and.w	r3, r3, #6
 8004222:	2b04      	cmp	r3, #4
 8004224:	bf02      	ittt	eq
 8004226:	68e5      	ldreq	r5, [r4, #12]
 8004228:	6833      	ldreq	r3, [r6, #0]
 800422a:	1aed      	subeq	r5, r5, r3
 800422c:	68a3      	ldr	r3, [r4, #8]
 800422e:	bf0c      	ite	eq
 8004230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004234:	2500      	movne	r5, #0
 8004236:	4293      	cmp	r3, r2
 8004238:	bfc4      	itt	gt
 800423a:	1a9b      	subgt	r3, r3, r2
 800423c:	18ed      	addgt	r5, r5, r3
 800423e:	2600      	movs	r6, #0
 8004240:	341a      	adds	r4, #26
 8004242:	42b5      	cmp	r5, r6
 8004244:	d11a      	bne.n	800427c <_printf_common+0xc8>
 8004246:	2000      	movs	r0, #0
 8004248:	e008      	b.n	800425c <_printf_common+0xa8>
 800424a:	2301      	movs	r3, #1
 800424c:	4652      	mov	r2, sl
 800424e:	4641      	mov	r1, r8
 8004250:	4638      	mov	r0, r7
 8004252:	47c8      	blx	r9
 8004254:	3001      	adds	r0, #1
 8004256:	d103      	bne.n	8004260 <_printf_common+0xac>
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004260:	3501      	adds	r5, #1
 8004262:	e7c6      	b.n	80041f2 <_printf_common+0x3e>
 8004264:	18e1      	adds	r1, r4, r3
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	2030      	movs	r0, #48	@ 0x30
 800426a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800426e:	4422      	add	r2, r4
 8004270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004278:	3302      	adds	r3, #2
 800427a:	e7c7      	b.n	800420c <_printf_common+0x58>
 800427c:	2301      	movs	r3, #1
 800427e:	4622      	mov	r2, r4
 8004280:	4641      	mov	r1, r8
 8004282:	4638      	mov	r0, r7
 8004284:	47c8      	blx	r9
 8004286:	3001      	adds	r0, #1
 8004288:	d0e6      	beq.n	8004258 <_printf_common+0xa4>
 800428a:	3601      	adds	r6, #1
 800428c:	e7d9      	b.n	8004242 <_printf_common+0x8e>
	...

08004290 <_printf_i>:
 8004290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004294:	7e0f      	ldrb	r7, [r1, #24]
 8004296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004298:	2f78      	cmp	r7, #120	@ 0x78
 800429a:	4691      	mov	r9, r2
 800429c:	4680      	mov	r8, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	469a      	mov	sl, r3
 80042a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042a6:	d807      	bhi.n	80042b8 <_printf_i+0x28>
 80042a8:	2f62      	cmp	r7, #98	@ 0x62
 80042aa:	d80a      	bhi.n	80042c2 <_printf_i+0x32>
 80042ac:	2f00      	cmp	r7, #0
 80042ae:	f000 80d2 	beq.w	8004456 <_printf_i+0x1c6>
 80042b2:	2f58      	cmp	r7, #88	@ 0x58
 80042b4:	f000 80b9 	beq.w	800442a <_printf_i+0x19a>
 80042b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042c0:	e03a      	b.n	8004338 <_printf_i+0xa8>
 80042c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042c6:	2b15      	cmp	r3, #21
 80042c8:	d8f6      	bhi.n	80042b8 <_printf_i+0x28>
 80042ca:	a101      	add	r1, pc, #4	@ (adr r1, 80042d0 <_printf_i+0x40>)
 80042cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042d0:	08004329 	.word	0x08004329
 80042d4:	0800433d 	.word	0x0800433d
 80042d8:	080042b9 	.word	0x080042b9
 80042dc:	080042b9 	.word	0x080042b9
 80042e0:	080042b9 	.word	0x080042b9
 80042e4:	080042b9 	.word	0x080042b9
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	080042b9 	.word	0x080042b9
 80042f0:	080042b9 	.word	0x080042b9
 80042f4:	080042b9 	.word	0x080042b9
 80042f8:	080042b9 	.word	0x080042b9
 80042fc:	0800443d 	.word	0x0800443d
 8004300:	08004367 	.word	0x08004367
 8004304:	080043f7 	.word	0x080043f7
 8004308:	080042b9 	.word	0x080042b9
 800430c:	080042b9 	.word	0x080042b9
 8004310:	0800445f 	.word	0x0800445f
 8004314:	080042b9 	.word	0x080042b9
 8004318:	08004367 	.word	0x08004367
 800431c:	080042b9 	.word	0x080042b9
 8004320:	080042b9 	.word	0x080042b9
 8004324:	080043ff 	.word	0x080043ff
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	1d1a      	adds	r2, r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6032      	str	r2, [r6, #0]
 8004330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004338:	2301      	movs	r3, #1
 800433a:	e09d      	b.n	8004478 <_printf_i+0x1e8>
 800433c:	6833      	ldr	r3, [r6, #0]
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	1d19      	adds	r1, r3, #4
 8004342:	6031      	str	r1, [r6, #0]
 8004344:	0606      	lsls	r6, r0, #24
 8004346:	d501      	bpl.n	800434c <_printf_i+0xbc>
 8004348:	681d      	ldr	r5, [r3, #0]
 800434a:	e003      	b.n	8004354 <_printf_i+0xc4>
 800434c:	0645      	lsls	r5, r0, #25
 800434e:	d5fb      	bpl.n	8004348 <_printf_i+0xb8>
 8004350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004354:	2d00      	cmp	r5, #0
 8004356:	da03      	bge.n	8004360 <_printf_i+0xd0>
 8004358:	232d      	movs	r3, #45	@ 0x2d
 800435a:	426d      	negs	r5, r5
 800435c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004360:	4859      	ldr	r0, [pc, #356]	@ (80044c8 <_printf_i+0x238>)
 8004362:	230a      	movs	r3, #10
 8004364:	e011      	b.n	800438a <_printf_i+0xfa>
 8004366:	6821      	ldr	r1, [r4, #0]
 8004368:	6833      	ldr	r3, [r6, #0]
 800436a:	0608      	lsls	r0, r1, #24
 800436c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004370:	d402      	bmi.n	8004378 <_printf_i+0xe8>
 8004372:	0649      	lsls	r1, r1, #25
 8004374:	bf48      	it	mi
 8004376:	b2ad      	uxthmi	r5, r5
 8004378:	2f6f      	cmp	r7, #111	@ 0x6f
 800437a:	4853      	ldr	r0, [pc, #332]	@ (80044c8 <_printf_i+0x238>)
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	bf14      	ite	ne
 8004380:	230a      	movne	r3, #10
 8004382:	2308      	moveq	r3, #8
 8004384:	2100      	movs	r1, #0
 8004386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800438a:	6866      	ldr	r6, [r4, #4]
 800438c:	60a6      	str	r6, [r4, #8]
 800438e:	2e00      	cmp	r6, #0
 8004390:	bfa2      	ittt	ge
 8004392:	6821      	ldrge	r1, [r4, #0]
 8004394:	f021 0104 	bicge.w	r1, r1, #4
 8004398:	6021      	strge	r1, [r4, #0]
 800439a:	b90d      	cbnz	r5, 80043a0 <_printf_i+0x110>
 800439c:	2e00      	cmp	r6, #0
 800439e:	d04b      	beq.n	8004438 <_printf_i+0x1a8>
 80043a0:	4616      	mov	r6, r2
 80043a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80043a6:	fb03 5711 	mls	r7, r3, r1, r5
 80043aa:	5dc7      	ldrb	r7, [r0, r7]
 80043ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043b0:	462f      	mov	r7, r5
 80043b2:	42bb      	cmp	r3, r7
 80043b4:	460d      	mov	r5, r1
 80043b6:	d9f4      	bls.n	80043a2 <_printf_i+0x112>
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d10b      	bne.n	80043d4 <_printf_i+0x144>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	07df      	lsls	r7, r3, #31
 80043c0:	d508      	bpl.n	80043d4 <_printf_i+0x144>
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	6861      	ldr	r1, [r4, #4]
 80043c6:	4299      	cmp	r1, r3
 80043c8:	bfde      	ittt	le
 80043ca:	2330      	movle	r3, #48	@ 0x30
 80043cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043d4:	1b92      	subs	r2, r2, r6
 80043d6:	6122      	str	r2, [r4, #16]
 80043d8:	f8cd a000 	str.w	sl, [sp]
 80043dc:	464b      	mov	r3, r9
 80043de:	aa03      	add	r2, sp, #12
 80043e0:	4621      	mov	r1, r4
 80043e2:	4640      	mov	r0, r8
 80043e4:	f7ff fee6 	bl	80041b4 <_printf_common>
 80043e8:	3001      	adds	r0, #1
 80043ea:	d14a      	bne.n	8004482 <_printf_i+0x1f2>
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	b004      	add	sp, #16
 80043f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	f043 0320 	orr.w	r3, r3, #32
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	4833      	ldr	r0, [pc, #204]	@ (80044cc <_printf_i+0x23c>)
 8004400:	2778      	movs	r7, #120	@ 0x78
 8004402:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	6831      	ldr	r1, [r6, #0]
 800440a:	061f      	lsls	r7, r3, #24
 800440c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004410:	d402      	bmi.n	8004418 <_printf_i+0x188>
 8004412:	065f      	lsls	r7, r3, #25
 8004414:	bf48      	it	mi
 8004416:	b2ad      	uxthmi	r5, r5
 8004418:	6031      	str	r1, [r6, #0]
 800441a:	07d9      	lsls	r1, r3, #31
 800441c:	bf44      	itt	mi
 800441e:	f043 0320 	orrmi.w	r3, r3, #32
 8004422:	6023      	strmi	r3, [r4, #0]
 8004424:	b11d      	cbz	r5, 800442e <_printf_i+0x19e>
 8004426:	2310      	movs	r3, #16
 8004428:	e7ac      	b.n	8004384 <_printf_i+0xf4>
 800442a:	4827      	ldr	r0, [pc, #156]	@ (80044c8 <_printf_i+0x238>)
 800442c:	e7e9      	b.n	8004402 <_printf_i+0x172>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	f023 0320 	bic.w	r3, r3, #32
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	e7f6      	b.n	8004426 <_printf_i+0x196>
 8004438:	4616      	mov	r6, r2
 800443a:	e7bd      	b.n	80043b8 <_printf_i+0x128>
 800443c:	6833      	ldr	r3, [r6, #0]
 800443e:	6825      	ldr	r5, [r4, #0]
 8004440:	6961      	ldr	r1, [r4, #20]
 8004442:	1d18      	adds	r0, r3, #4
 8004444:	6030      	str	r0, [r6, #0]
 8004446:	062e      	lsls	r6, r5, #24
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	d501      	bpl.n	8004450 <_printf_i+0x1c0>
 800444c:	6019      	str	r1, [r3, #0]
 800444e:	e002      	b.n	8004456 <_printf_i+0x1c6>
 8004450:	0668      	lsls	r0, r5, #25
 8004452:	d5fb      	bpl.n	800444c <_printf_i+0x1bc>
 8004454:	8019      	strh	r1, [r3, #0]
 8004456:	2300      	movs	r3, #0
 8004458:	6123      	str	r3, [r4, #16]
 800445a:	4616      	mov	r6, r2
 800445c:	e7bc      	b.n	80043d8 <_printf_i+0x148>
 800445e:	6833      	ldr	r3, [r6, #0]
 8004460:	1d1a      	adds	r2, r3, #4
 8004462:	6032      	str	r2, [r6, #0]
 8004464:	681e      	ldr	r6, [r3, #0]
 8004466:	6862      	ldr	r2, [r4, #4]
 8004468:	2100      	movs	r1, #0
 800446a:	4630      	mov	r0, r6
 800446c:	f7fb feb0 	bl	80001d0 <memchr>
 8004470:	b108      	cbz	r0, 8004476 <_printf_i+0x1e6>
 8004472:	1b80      	subs	r0, r0, r6
 8004474:	6060      	str	r0, [r4, #4]
 8004476:	6863      	ldr	r3, [r4, #4]
 8004478:	6123      	str	r3, [r4, #16]
 800447a:	2300      	movs	r3, #0
 800447c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004480:	e7aa      	b.n	80043d8 <_printf_i+0x148>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	4632      	mov	r2, r6
 8004486:	4649      	mov	r1, r9
 8004488:	4640      	mov	r0, r8
 800448a:	47d0      	blx	sl
 800448c:	3001      	adds	r0, #1
 800448e:	d0ad      	beq.n	80043ec <_printf_i+0x15c>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	079b      	lsls	r3, r3, #30
 8004494:	d413      	bmi.n	80044be <_printf_i+0x22e>
 8004496:	68e0      	ldr	r0, [r4, #12]
 8004498:	9b03      	ldr	r3, [sp, #12]
 800449a:	4298      	cmp	r0, r3
 800449c:	bfb8      	it	lt
 800449e:	4618      	movlt	r0, r3
 80044a0:	e7a6      	b.n	80043f0 <_printf_i+0x160>
 80044a2:	2301      	movs	r3, #1
 80044a4:	4632      	mov	r2, r6
 80044a6:	4649      	mov	r1, r9
 80044a8:	4640      	mov	r0, r8
 80044aa:	47d0      	blx	sl
 80044ac:	3001      	adds	r0, #1
 80044ae:	d09d      	beq.n	80043ec <_printf_i+0x15c>
 80044b0:	3501      	adds	r5, #1
 80044b2:	68e3      	ldr	r3, [r4, #12]
 80044b4:	9903      	ldr	r1, [sp, #12]
 80044b6:	1a5b      	subs	r3, r3, r1
 80044b8:	42ab      	cmp	r3, r5
 80044ba:	dcf2      	bgt.n	80044a2 <_printf_i+0x212>
 80044bc:	e7eb      	b.n	8004496 <_printf_i+0x206>
 80044be:	2500      	movs	r5, #0
 80044c0:	f104 0619 	add.w	r6, r4, #25
 80044c4:	e7f5      	b.n	80044b2 <_printf_i+0x222>
 80044c6:	bf00      	nop
 80044c8:	08004621 	.word	0x08004621
 80044cc:	08004632 	.word	0x08004632

080044d0 <memmove>:
 80044d0:	4288      	cmp	r0, r1
 80044d2:	b510      	push	{r4, lr}
 80044d4:	eb01 0402 	add.w	r4, r1, r2
 80044d8:	d902      	bls.n	80044e0 <memmove+0x10>
 80044da:	4284      	cmp	r4, r0
 80044dc:	4623      	mov	r3, r4
 80044de:	d807      	bhi.n	80044f0 <memmove+0x20>
 80044e0:	1e43      	subs	r3, r0, #1
 80044e2:	42a1      	cmp	r1, r4
 80044e4:	d008      	beq.n	80044f8 <memmove+0x28>
 80044e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ee:	e7f8      	b.n	80044e2 <memmove+0x12>
 80044f0:	4402      	add	r2, r0
 80044f2:	4601      	mov	r1, r0
 80044f4:	428a      	cmp	r2, r1
 80044f6:	d100      	bne.n	80044fa <memmove+0x2a>
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004502:	e7f7      	b.n	80044f4 <memmove+0x24>

08004504 <_sbrk_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4d06      	ldr	r5, [pc, #24]	@ (8004520 <_sbrk_r+0x1c>)
 8004508:	2300      	movs	r3, #0
 800450a:	4604      	mov	r4, r0
 800450c:	4608      	mov	r0, r1
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	f7fc fc98 	bl	8000e44 <_sbrk>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_sbrk_r+0x1a>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_sbrk_r+0x1a>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	20001338 	.word	0x20001338

08004524 <memcpy>:
 8004524:	440a      	add	r2, r1
 8004526:	4291      	cmp	r1, r2
 8004528:	f100 33ff 	add.w	r3, r0, #4294967295
 800452c:	d100      	bne.n	8004530 <memcpy+0xc>
 800452e:	4770      	bx	lr
 8004530:	b510      	push	{r4, lr}
 8004532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800453a:	4291      	cmp	r1, r2
 800453c:	d1f9      	bne.n	8004532 <memcpy+0xe>
 800453e:	bd10      	pop	{r4, pc}

08004540 <_realloc_r>:
 8004540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004544:	4680      	mov	r8, r0
 8004546:	4615      	mov	r5, r2
 8004548:	460c      	mov	r4, r1
 800454a:	b921      	cbnz	r1, 8004556 <_realloc_r+0x16>
 800454c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004550:	4611      	mov	r1, r2
 8004552:	f7ff bc4b 	b.w	8003dec <_malloc_r>
 8004556:	b92a      	cbnz	r2, 8004564 <_realloc_r+0x24>
 8004558:	f7ff fbdc 	bl	8003d14 <_free_r>
 800455c:	2400      	movs	r4, #0
 800455e:	4620      	mov	r0, r4
 8004560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004564:	f000 f81a 	bl	800459c <_malloc_usable_size_r>
 8004568:	4285      	cmp	r5, r0
 800456a:	4606      	mov	r6, r0
 800456c:	d802      	bhi.n	8004574 <_realloc_r+0x34>
 800456e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004572:	d8f4      	bhi.n	800455e <_realloc_r+0x1e>
 8004574:	4629      	mov	r1, r5
 8004576:	4640      	mov	r0, r8
 8004578:	f7ff fc38 	bl	8003dec <_malloc_r>
 800457c:	4607      	mov	r7, r0
 800457e:	2800      	cmp	r0, #0
 8004580:	d0ec      	beq.n	800455c <_realloc_r+0x1c>
 8004582:	42b5      	cmp	r5, r6
 8004584:	462a      	mov	r2, r5
 8004586:	4621      	mov	r1, r4
 8004588:	bf28      	it	cs
 800458a:	4632      	movcs	r2, r6
 800458c:	f7ff ffca 	bl	8004524 <memcpy>
 8004590:	4621      	mov	r1, r4
 8004592:	4640      	mov	r0, r8
 8004594:	f7ff fbbe 	bl	8003d14 <_free_r>
 8004598:	463c      	mov	r4, r7
 800459a:	e7e0      	b.n	800455e <_realloc_r+0x1e>

0800459c <_malloc_usable_size_r>:
 800459c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a0:	1f18      	subs	r0, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bfbc      	itt	lt
 80045a6:	580b      	ldrlt	r3, [r1, r0]
 80045a8:	18c0      	addlt	r0, r0, r3
 80045aa:	4770      	bx	lr

080045ac <_init>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr

080045b8 <_fini>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr
